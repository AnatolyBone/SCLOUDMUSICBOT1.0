// index.js (–§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–û–õ–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–†–û–ö–ê–ß–ê–ù–ù–û–ô –†–ê–°–°–´–õ–ö–û–ô)

import express from 'express';
import session from 'express-session';
import compression from 'compression';
import path from 'path';
import multer from 'multer';
import expressLayouts from 'express-ejs-layouts';
import { fileURLToPath } from 'url';
import pgSessionFactory from 'connect-pg-simple';
import pLimit from 'p-limit';
import fs from 'fs';
import mime from 'mime-types';
import cron from 'node-cron';

import { 
    pool, supabase, getUserById, resetDailyStats, getAllUsers, getPaginatedUsers, 
    getReferralSourcesStats, getDownloadsByDate, getRegistrationsByDate, 
    getActiveUsersByDate, getExpiringUsers, setPremium, updateUserField, 
    getLatestReviews, getUserActivityByDayHour, getDownloadsByUserId, getReferralsByUserId, 
    getCachedTracksCount, getActiveFreeUsers, getActivePremiumUsers,
    getUsersCountByTariff, getTopReferralSources, getDailyStats,
    getActivityByWeekday, getTopTracks, getTopUsers, getHourlyActivity, getUsersAsCsv, 
    getUserActions, logUserAction,
    createBroadcastTask, getAndStartPendingBroadcastTask, completeBroadcastTask, failBroadcastTask,
    getAllBroadcastTasks, deleteBroadcastTask, getBroadcastTaskById, updateBroadcastTask, findAndInterruptActiveBroadcast, getReferrerInfo, getReferredUsers, getReferralStats
} from './db.js';
import { isShuttingDown, setShuttingDown, setMaintenanceMode, isBroadcasting, setBroadcasting } from './services/appState.js';
import { bot } from './bot.js';
import redisService from './services/redisClient.js';
import { WEBHOOK_URL, PORT, SESSION_SECRET, ADMIN_ID, ADMIN_LOGIN, ADMIN_PASSWORD, WEBHOOK_PATH, STORAGE_CHANNEL_ID, BROADCAST_STORAGE_ID } from './config.js';
import { loadTexts, allTextsSync, setText, getEditableTexts } from './config/texts.js';
import { downloadQueue } from './services/downloadManager.js';

const app = express();

const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        const dest = 'uploads/'; // –õ–æ–∫–∞–ª—å–Ω–∞—è –ø–∞–ø–∫–∞ –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
        fs.mkdirSync(dest, { recursive: true });
        cb(null, dest);
    },
    filename: function (req, file, cb) {
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        cb(null, file.fieldname + '-' + uniqueSuffix + path.extname(file.originalname));
    }
});
const upload = multer({ storage: storage });

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const limit = pLimit(1); 

async function startApp() {
    setMaintenanceMode(false);
    console.log('[App] –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    try {
        await loadTexts(true);
        await redisService.connect();
        
        setupExpress();
        startBroadcastWorker();

       // –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –≠–¢–û–¢ –ë–õ–û–ö –í INDEX.JS

if (process.env.NODE_ENV === 'production') {
    const fullWebhookUrl = (WEBHOOK_URL.endsWith('/') ? WEBHOOK_URL.slice(0, -1) : WEBHOOK_URL) + WEBHOOK_PATH;
    const allowedUpdates = ['message', 'callback_query', 'inline_query'];
    
    console.log('[App] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤–µ–±—Ö—É–∫ –∏ —Å–±—Ä–∞—Å—ã–≤–∞—é –æ—á–µ—Ä–µ–¥—å...');
    await bot.telegram.setWebhook(fullWebhookUrl, {
        drop_pending_updates: true, // <-- –≠—Ç–æ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ
        allowed_updates: allowedUpdates
    });
    console.log('[App] –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.');
    
    app.use(bot.webhookCallback(WEBHOOK_PATH));

        } else {
            console.log('[App] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long-polling...');
            await bot.telegram.deleteWebhook({ drop_pending_updates: true });
            bot.launch({
                allowedUpdates: ['message', 'callback_query', 'inline_query']
            });
        }

        const server = app.listen(PORT, () => console.log(`‚úÖ [App] –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}.`));
setupGracefulShutdown(server);
        
        console.log('[App] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...');
        setInterval(() => resetDailyStats(), 24 * 3600 * 1000);
        setInterval(() => console.log(`[Monitor] –û—á–µ—Ä–µ–¥—å: ${downloadQueue.size} –≤ –æ–∂–∏–¥–∞–Ω–∏–∏, ${downloadQueue.active} –≤ —Ä–∞–±–æ—Ç–µ.`), 60000);

    } catch (err) {
        console.error('üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', err);
        process.exit(1);
    }
}

function parseButtons(buttonsText) {
    if (!buttonsText || typeof buttonsText !== 'string' || buttonsText.trim() === '') {
        return null;
    }
    const rows = buttonsText.split('\n').map(line => line.trim()).filter(line => line);
    const keyboard = rows.map(row => {
        const parts = row.split('|').map(p => p.trim());
        const [text, type, data] = parts;
        if (!text || !type) return null;

        switch (type.toLowerCase()) {
            case 'url': return { text, url: data };
            case 'callback': return { text, callback_data: data };
            case 'inline_search': return { text, switch_inline_query: data || '' };
            default: return null;
        }
    }).filter(Boolean);
    
    return keyboard.length > 0 ? keyboard.map(button => [button]) : null;
}

function setupExpress() {
    console.log('[Express] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express —Å–µ—Ä–≤–µ—Ä–∞...');
    app.use(compression());
    app.use(express.urlencoded({ extended: true }));
    app.use(express.json());
    app.use('/static', express.static(path.join(__dirname, 'public')));
    app.use(expressLayouts);
    app.set('view engine', 'ejs');
    app.set('views', path.join(__dirname, 'views'));
    app.set('layout', 'layout');
    const pgSession = pgSessionFactory(session);
    app.use(session({ store: new pgSession({ pool, tableName: 'session' }), secret: SESSION_SECRET, resave: false, saveUninitialized: false, cookie: { maxAge: 30 * 24 * 60 * 60 * 1000 } }));
    app.use(async (req, res, next) => {
        res.locals.user = null;
        res.locals.page = '';
        if (req.session.authenticated && req.session.userId === ADMIN_ID) {
            try { res.locals.user = await getUserById(req.session.userId); } catch {}
        }
        next();
    });
    const requireAuth = (req, res, next) => {
        if (req.session.authenticated && req.session.userId === ADMIN_ID) return next();
        res.redirect('/admin');
    };
    
    app.get('/health', (req, res) => res.status(200).send('OK'));
    app.get('/', requireAuth, (req, res) => res.redirect('/dashboard'));
    app.get('/admin', (req, res) => {
        if (req.session.authenticated) return res.redirect('/dashboard');
        res.render('login', { title: '–í—Ö–æ–¥', page: 'login', layout: false, error: null });
    });
    app.post('/admin', (req, res) => {
        if (req.body.username === ADMIN_LOGIN && req.body.password === ADMIN_PASSWORD) {
            req.session.authenticated = true;
            req.session.userId = ADMIN_ID;
            res.redirect('/dashboard');
        } else {
            res.render('login', { title: '–í—Ö–æ–¥', error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', page: 'login', layout: false });
        }
    });
    app.get('/logout', (req, res) => req.session.destroy(() => res.redirect('/admin')));
    
    // index.js

app.get('/dashboard', requireAuth, async (req, res) => {
    try {
        let storageStatus = { available: false, error: '' };
        if (STORAGE_CHANNEL_ID) {
            try {
                await bot.telegram.getChat(STORAGE_CHANNEL_ID);
                storageStatus.available = true;
            } catch (e) {
                storageStatus.error = e.message;
            }
        }
        
        // 1. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –≤—ã–∑–æ–≤–æ–≤
        const [
            users,
            registrationsRaw,
            cachedTracksCount,
            usersByTariff,
            topSources,
            dailyStats,
            weekdayActivity,
            topTracks,
            topUsers,
            hourlyActivity,
            referralStats // <-- –¢–µ–ø–µ—Ä—å –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ
        ] = await Promise.all([
            getAllUsers(true),
            getRegistrationsByDate(),
            getCachedTracksCount(),
            getUsersCountByTariff(),
            getTopReferralSources(),
            getDailyStats({ startDate: req.query.startDate, endDate: req.query.endDate }),
            getActivityByWeekday(),
            getTopTracks(),
            getTopUsers(),
            getHourlyActivity(),
            getReferralStats() // <-- –ò –≤—ã–∑–æ–≤ –Ω–∞ —Å–≤–æ–µ–º –º–µ—Å—Ç–µ
        ]);
        
        // 2. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å –æ–±—ä–µ–∫—Ç–∞ stats
        const stats = {
            total_users: users.length,
            active_users: users.filter(u => u.active).length,
            total_downloads: users.reduce((sum, u) => sum + (u.total_downloads || 0), 0),
            active_today: users.filter(u => u.last_active && new Date(u.last_active).toDateString() === new Date().toDateString()).length,
            queueWaiting: downloadQueue.size,
            queueActive: downloadQueue.active,
            cachedTracksCount: cachedTracksCount,
            usersByTariff: usersByTariff || {},
            topSources: topSources || [],
            totalReferred: referralStats.totalReferred, // <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            topReferrers: referralStats.topReferrers // <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
        };
        
        const chartDataCombined = {
            labels: (dailyStats || []).map(d => new Date(d.day).toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' })),
            datasets: [
                { label: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', data: (dailyStats || []).map(d => d.registrations), borderColor: '#198754', tension: 0.1, fill: false },
                { label: '–ê–∫—Ç–∏–≤–Ω—ã–µ —é–∑–µ—Ä—ã', data: (dailyStats || []).map(d => d.active_users), borderColor: '#0d6efd', tension: 0.1, fill: false },
                { label: '–ó–∞–≥—Ä—É–∑–∫–∏', data: (dailyStats || []).map(d => d.downloads), borderColor: '#fd7e14', tension: 0.1, fill: false }
            ]
        };
        
        const chartDataTariffs = {
            labels: Object.keys(usersByTariff || {}),
            datasets: [{ data: Object.values(usersByTariff || {}), backgroundColor: ['#6c757d', '#17a2b8', '#ffc107', '#007bff', '#dc3545'] }]
        };
        
        const chartDataWeekday = {
            labels: (weekdayActivity || []).map(d => d.weekday.trim()),
            datasets: [{ label: '–ó–∞–≥—Ä—É–∑–∫–∏', data: (weekdayActivity || []).map(d => d.count), backgroundColor: 'rgba(13, 110, 253, 0.5)' }]
        };
        
        const chartDataHourly = {
            labels: Array.from({ length: 24 }, (_, i) => `${i.toString().padStart(2, '0')}:00`),
            datasets: [{
                label: '–ó–∞–≥—Ä—É–∑–∫–∏',
                data: hourlyActivity,
                backgroundColor: 'rgba(255, 99, 132, 0.5)',
                borderColor: 'rgba(255, 99, 132, 1)',
                borderWidth: 1
            }]
        };
        
        res.render('dashboard', {
            title: '–î–∞—à–±–æ—Ä–¥',
            page: 'dashboard',
            stats,
            storageStatus,
            startDate: req.query.startDate,
            endDate: req.query.endDate,
            chartDataCombined,
            chartDataTariffs,
            chartDataWeekday,
            topTracks,
            topUsers,
            chartDataHourly
        });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞:", error);
        res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
    }
});

    app.get('/users', requireAuth, async (req, res) => {
        try {
            const { q = '', status = '', page = 1, limit = 25, sort = 'created_at', order = 'desc' } = req.query;
            const { users, totalPages, totalUsers } = await getPaginatedUsers({
                searchQuery: q, statusFilter: status, page: parseInt(page), limit: parseInt(limit), sortBy: sort, sortOrder: order
            });
            const queryParams = { q, status, page, limit, sort, order };
            res.render('users', { title: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', page: 'users', users, totalUsers, totalPages, currentPage: parseInt(page), limit: parseInt(limit), searchQuery: q, statusFilter: status, queryParams });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
            res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }
    });
    
    app.get('/users/export.csv', requireAuth, async (req, res) => {
        try {
            const { q = '', status = '' } = req.query;
            const csvData = await getUsersAsCsv({ searchQuery: q, statusFilter: status });
            res.setHeader('Content-Type', 'text/csv; charset=utf-8');
            res.setHeader('Content-Disposition', `attachment; filename="users_${new Date().toISOString().slice(0, 10)}.csv"`);
            res.send(csvData);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
            res.status(500).send("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å CSV-—Ñ–∞–π–ª");
        }
    });

    app.get('/users-table', requireAuth, async (req, res) => {
        try {
            const { q = '', status = '', page = 1, limit = 25, sort = 'created_at', order = 'desc' } = req.query;
            const { users, totalPages } = await getPaginatedUsers({
                searchQuery: q, statusFilter: status, page: parseInt(page), limit: parseInt(limit), sortBy: sort, sortOrder: order
            });
            const queryParams = { q, status, page, limit, sort, order };
            res.render('partials/users-table', { users, totalPages, currentPage: parseInt(page), queryParams, layout: false });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:", error);
            res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }
    });
    
    // index.js

app.get('/user/:id', requireAuth, async (req, res) => {
    try {
        const userId = req.params.id;
        
        // –¢–µ–ø–µ—Ä—å –º—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º 5 –ø–æ—Ä—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        const [
            userProfile,
            downloads,
            actions,
            referrer, // <-- –ö—Ç–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≠–¢–û–ì–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            referredUsers // <-- –ö–æ–≥–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª –≠–¢–û–¢ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        ] = await Promise.all([
            getUserById(userId),
            getDownloadsByUserId(userId),
            getUserActions(userId),
            getReferrerInfo(userId), // <-- –ù–∞—à–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
            getReferredUsers(userId) // <-- –ù–∞—à–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
        ]);
        
        if (!userProfile) {
            // –û—Å—Ç–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–∞–∫ –µ—Å—Ç—å, –Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
            return res.status(404).render('user-profile', {
                title: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω',
                page: 'users',
                userProfile: null,
                downloads: [],
                actions: [],
                referrer: null,
                referredUsers: []
            });
        }
        
        // –ü–µ—Ä–µ–¥–∞–µ–º –≤—Å–µ 5 –ø–æ—Ä—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö –≤ —à–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏
        res.render('user-profile', {
            title: `–ü—Ä–æ—Ñ–∏–ª—å: ${userProfile.first_name || userId}`,
            page: 'users',
            userProfile,
            downloads,
            actions,
            referrer, // <-- –ü–µ—Ä–µ–¥–∞–µ–º –≤ —à–∞–±–ª–æ–Ω
            referredUsers // <-- –ü–µ—Ä–µ–¥–∞–µ–º –≤ —à–∞–±–ª–æ–Ω
        });
        
    } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.params.id}:`, error);
        res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
    }
});
    
    app.get('/broadcasts', requireAuth, async (req, res) => {
        const tasks = await getAllBroadcastTasks();
        res.render('broadcasts', { title: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏', page: 'broadcasts', tasks });
    });
    
    app.get('/broadcast/new', requireAuth, (req, res) => { 
        res.render('broadcast-form', { title: '–ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', page: 'broadcasts', error: null, success: null });
        console.log(`[Broadcast Debug] –ò—Å–ø–æ–ª—å–∑—É—é BROADCAST_STORAGE_ID: '${BROADCAST_STORAGE_ID}' (—Ç–∏–ø: ${typeof BROADCAST_STORAGE_ID})`);
    });

    app.get('/broadcast/edit/:id', requireAuth, async (req, res) => {
        const task = await getBroadcastTaskById(req.params.id);
        if (!task || task.status !== 'pending') {
            return res.redirect('/broadcasts');
        }
        const buttons_text = task.keyboard ? task.keyboard.map(row => {
            const btn = row[0];
            if (btn.url) return `${btn.text} | url | ${btn.url}`;
            if (btn.callback_data) return `${btn.text} | callback | ${btn.callback_data}`;
            if (btn.switch_inline_query !== undefined) return `${btn.text} | inline_search | ${btn.switch_inline_query}`;
            return '';
        }).join('\n') : '';
        res.render('broadcast-form', { title: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É', page: 'broadcasts', task: {...task, buttons_text}, error: null, success: null });
    });

    app.post('/broadcast/delete', requireAuth, async (req, res) => {
        const { taskId } = req.body;
        await deleteBroadcastTask(taskId);
        res.redirect('/broadcasts');
    });

    // index.js

// index.js

app.post(['/broadcast/new', '/broadcast/edit/:id'], requireAuth, upload.single('file'), async (req, res) => {
    const isEditing = !!req.params.id;
    const taskId = req.params.id;
    const file = req.file;

    try {
        const { message, buttons, targetAudience, scheduledAt, disable_notification, enable_web_page_preview, action } = req.body;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ —Ñ–æ—Ä–º—ã.
        // –≠—Ç–æ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç –ø–æ—Ç–µ—Ä—é ID –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö.
        const taskForRender = { ...req.body, buttons_text: buttons };
        if (isEditing) {
            taskForRender.id = taskId;
        }

        const renderOptions = {
            title: isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É' : '–ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞',
            page: 'broadcasts',
            success: null,
            error: null,
            task: taskForRender // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        };

        const existingTask = isEditing ? await getBroadcastTaskById(taskId) : {};

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!message && !file && !(existingTask && existingTask.file_id)) {
            if (file) fs.unlinkSync(file.path);
            renderOptions.error = '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω —Ñ–∞–π–ª.';
            return res.render('broadcast-form', renderOptions);
        }

        let fileId = existingTask.file_id || null;
        let fileMimeType = existingTask.file_mime_type || null;

        if (file) {
            if (!BROADCAST_STORAGE_ID) {
                if (file) fs.unlinkSync(file.path);
                renderOptions.error = '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∫–∞–Ω–∞–ª-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ (BROADCAST_STORAGE_ID) –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!';
                return res.render('broadcast-form', renderOptions);
            }
            console.log(`[Broadcast] –ó–∞–≥—Ä—É–∂–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è—é –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ...`);
            const mimeType = mime.lookup(file.path) || '';
            let sentMessage;
            const source = { source: file.path };
            
            if (mimeType.startsWith('image/')) sentMessage = await bot.telegram.sendPhoto(BROADCAST_STORAGE_ID, source);
            else if (mimeType.startsWith('video/')) sentMessage = await bot.telegram.sendVideo(BROADCAST_STORAGE_ID, source);
            else if (mimeType.startsWith('audio/')) sentMessage = await bot.telegram.sendAudio(BROADCAST_STORAGE_ID, source);
            else sentMessage = await bot.telegram.sendDocument(BROADCAST_STORAGE_ID, source);
            
            fileId = sentMessage.photo?.pop()?.file_id || sentMessage.video?.file_id || sentMessage.audio?.file_id || sentMessage.document?.file_id;
            fileMimeType = mimeType;
            
            fs.unlinkSync(file.path);
        }

        const taskData = {
            message,
            keyboard: parseButtons(buttons),
            file_id: fileId,
            file_mime_type: fileMimeType,
            targetAudience,
            disableNotification: !!disable_notification,
            disable_web_page_preview: !enable_web_page_preview,
        };

        if (action === 'preview') {
            await runSingleBroadcast({ ...taskData, targetAudience: 'preview' }, [{ id: ADMIN_ID, first_name: 'Admin' }]);
            renderOptions.success = '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–∞–º –≤ Telegram.';
            return res.render('broadcast-form', renderOptions);
        }

        const scheduleTime = scheduledAt ? new Date(scheduledAt) : new Date();
        if (isEditing) {
            await updateBroadcastTask(taskId, { ...taskData, scheduledAt: scheduleTime });
        } else {
            await createBroadcastTask({ ...taskData, scheduledAt: scheduleTime });
        }
        res.redirect('/broadcasts');

    } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ (ID: ${taskId}):`, e);
        if (file) {
            try { fs.unlinkSync(file.path); console.log('[Error Cleanup] –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.'); } 
            catch (cleanupError) { console.error('[Error Cleanup] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª:', cleanupError); }
        }
        
        const taskForRenderOnError = { ...req.body, buttons_text: req.body.buttons };
        if (isEditing) {
            taskForRenderOnError.id = taskId;
        }

        res.render('broadcast-form', { 
            title: isEditing ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É' : '–ù–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞', 
            page: 'broadcasts', 
            error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á—É. ' + e.message, 
            success: null, 
            task: taskForRenderOnError
        });
    }
});

   app.get('/texts', requireAuth, async (req, res) => {
    try {
        // –†–∞–Ω—å—à–µ –±—ã–ª–æ: const texts = allTextsSync();
        // –¢–µ–ø–µ—Ä—å –º—ã –±–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Ç–µ–∫—Å—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        const texts = getEditableTexts();
        
        res.render('texts', {
            title: '–†–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–æ–≤',
            page: 'texts',
            texts, // –ü–µ—Ä–µ–¥–∞–µ–º –≤ —à–∞–±–ª–æ–Ω —É–∂–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
            success: req.query.success
        });
        
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ç–µ–∫—Å—Ç–æ–≤:", error);
        res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
    }
});

    app.post('/texts/update', requireAuth, async (req, res) => {
        try {
            const { key, value } = req.body;
            await setText(key, value);
            res.redirect('/texts?success=true');
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞:", error);
            res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }
    });

    app.get('/expiring-users', requireAuth, async (req, res) => {
        try {
            const users = await getExpiringUsers();
            res.render('expiring-users', { title: '–ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏', page: 'expiring-users', users });
        } catch(e) {
            res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }
    });

    app.post('/set-tariff', requireAuth, async (req, res) => {
        const { userId, limit, days } = req.body;
        try {
            await setPremium(userId, parseInt(limit), parseInt(days) || 30);
            await logUserAction(userId, 'tariff_changed_by_admin', { 
                new_limit: parseInt(limit), 
                days: parseInt(days) || 30 
            });
            let tariffName = '';
            const newLimit = parseInt(limit);
            if (newLimit <= 5) tariffName = 'Free';
            else if (newLimit <= 30) tariffName = 'Plus';
            else if (newLimit <= 100) tariffName = 'Pro';
            else tariffName = 'Unlimited';
            const message = `üéâ –í–∞—à —Ç–∞—Ä–∏—Ñ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n–ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: *${tariffName}* (${newLimit} –∑–∞–≥—Ä—É–∑–æ–∫/–¥–µ–Ω—å).\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: *${parseInt(days) || 30} –¥–Ω–µ–π*.`;
            await bot.telegram.sendMessage(userId, message, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error(`[Admin] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è ${userId}:`, error.message);
        }
        res.redirect(req.get('Referrer') || '/users');
    });

    app.post('/reset-bonus', requireAuth, async (req, res) => {
        const { userId } = req.body;
        if (userId) { await updateUserField(userId, 'subscribed_bonus_used', false); }
        res.redirect(req.get('Referrer') || '/users');
    });

    app.post('/reset-daily-limit', requireAuth, async (req, res) => {
        const { userId } = req.body;
        if (userId) {
            await updateUserField(userId, 'downloads_today', 0);
            await updateUserField(userId, 'tracks_today', '[]');
        }
        res.redirect(req.get('Referrer') || '/users');
    });
    
    app.post('/user/set-status', requireAuth, async (req, res) => {
        const { userId, newStatus } = req.body;
        if (userId && (newStatus === 'true' || newStatus === 'false')) {
            try {
                const isActive = newStatus === 'true';
                await updateUserField(userId, 'active', isActive);
                const actionType = isActive ? 'unbanned_by_admin' : 'banned_by_admin';
                await logUserAction(userId, actionType);
                if (isActive) {
                    await bot.telegram.sendMessage(userId, '‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —Å–Ω–æ–≤–∞ –∞–∫—Ç–∏–≤–µ–Ω.').catch(() => {});
                }
            } catch (error) {
                console.error(`[Admin] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è ${userId}:`, error.message);
            }
        }
        res.redirect(req.get('Referrer') || '/users');
    });
}

// index.js

// >>>>> –ó–ê–ú–ï–ù–ò–¢–ï –°–£–©–ï–°–¢–í–£–Æ–©–£–Æ –§–£–ù–ö–¶–ò–Æ –ù–ê –≠–¢–£ <<<<<
async function runSingleBroadcast(task, users, taskId = null) {
    console.log(`[Broadcast Worker] –ó–∞–ø—É—Å–∫ —Ä–∞—Å—Å—ã–ª–∫–∏ –¥–ª—è ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`);
    let successCount = 0, errorCount = 0;
    
    for (const user of users) {
        try {
            const personalMessage = (task.message || '').replace(/{first_name}/g, user.first_name || '–¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥');
            
            const options = { 
                parse_mode: 'HTML', // <--- –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï
                disable_web_page_preview: task.disable_web_page_preview, 
                disable_notification: task.disable_notification 
            };
            if (task.keyboard && task.keyboard.length > 0) {
                options.reply_markup = { inline_keyboard: task.keyboard };
            }

            const fileId = task.file_id;

            if (fileId) {
                if (personalMessage) options.caption = personalMessage;
                const mimeType = task.file_mime_type || '';

                if (mimeType.startsWith('image/')) {
                    await bot.telegram.sendPhoto(user.id, fileId, options);
                } else if (mimeType.startsWith('video/')) {
                    await bot.telegram.sendVideo(user.id, fileId, options);
                } else if (mimeType.startsWith('audio/')) {
                    await bot.telegram.sendAudio(user.id, fileId, options);
                } else {
                    await bot.telegram.sendDocument(user.id, fileId, options);
                }
            } else if (personalMessage) {
                await bot.telegram.sendMessage(user.id, personalMessage, options);
            }
            
            successCount++;
        } catch (e) {
            errorCount++;
            if (e.response?.error_code === 403) await updateUserField(user.id, 'active', false);
        }
        await new Promise(resolve => setTimeout(resolve, 50));
    }
    
    const report = { successCount, errorCount, totalUsers: users.length };
    console.log(`[Broadcast Worker] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`, report);

    // –≠—Ç–æ—Ç –±–ª–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É. –ú—ã –µ–≥–æ —Ç–æ–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–º –Ω–∞ HTML.
    if ((users.length > 1 || (users.length === 1 && users[0].id !== ADMIN_ID)) && taskId) {
        try {
            const audienceName = (task.target_audience || 'unknown').replace('_', ' ');
            // <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ —Ç–µ–ø–µ—Ä—å —Ç–æ–∂–µ –≤ HTML ---
            const reportMessage = `üì¢ <b>–û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Å—ã–ª–∫–µ #${taskId}</b>\n\n` +
                                `‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>${successCount}</b>\n` +
                                `‚ùå –û—à–∏–±–∫–∏: <b>${errorCount}</b>\n` +
                                `üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: <b>${audienceName}</b> (${users.length} —á–µ–ª.)`;

            // <--- –ò–ó–ú–ï–ù–ï–ù–ò–ï: parse_mode –¥–ª—è –æ—Ç—á–µ—Ç–∞ ---
            await bot.telegram.sendMessage(ADMIN_ID, reportMessage, { parse_mode: 'HTML' });
        } catch (e) { console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É:', e.message); }
    }
    return report;
}
// ======================= –§–ò–ù–ê–õ–¨–ù–´–ô –ë–õ–û–ö –î–õ–Ø –ö–û–ù–¶–ê INDEX.JS =======================

function setupGracefulShutdown(server) {
    const SHUTDOWN_TIMEOUT = 25000; // 25 —Å–µ–∫—É–Ω–¥ (Render –¥–∞–µ—Ç 30)
    
    const gracefulShutdown = async (signal) => {
        // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
        if (isShuttingDown) {
            console.log('[Shutdown] –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —É–∂–µ –∑–∞–ø—É—â–µ–Ω, –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –≤—ã–∑–æ–≤ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω.');
            return;
        }
        setShuttingDown();
        console.log(`[Shutdown] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ù–∞—á–∏–Ω–∞—é –∏–∑—è—â–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...`);
        
        // 1. –ü–µ—Ä–µ—Å—Ç–∞–µ–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å –Ω–æ–≤—ã–µ HTTP –∑–∞–ø—Ä–æ—Å—ã
        server.close(() => {
            console.log('[Shutdown] HTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä—ã—Ç.');
        });
        
        // 2. –ü—Ä–µ—Ä—ã–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if (isBroadcasting) {
            console.log('[Shutdown] –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞. –ü–æ–º–µ—á–∞—é –µ–µ –∫–∞–∫ –ø—Ä–µ—Ä–≤–∞–Ω–Ω—É—é...');
            await findAndInterruptActiveBroadcast();
        }
        
        // 3. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        if (downloadQueue.active > 0) {
            console.log(`[Shutdown] –û–∂–∏–¥–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∑–∞–¥–∞—á–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (–º–∞–∫—Å. ${SHUTDOWN_TIMEOUT / 1000}—Å)...`);
            const waitForQueue = new Promise(resolve => {
                const interval = setInterval(() => {
                    if (downloadQueue.active === 0) {
                        clearInterval(interval);
                        resolve('queue_empty');
                    }
                }, 500);
            });
            const timeout = new Promise(resolve => setTimeout(() => resolve('timeout'), SHUTDOWN_TIMEOUT));
            await Promise.race([waitForQueue, timeout]);
        }
        
        // 4. –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        console.log('[Shutdown] –ó–∞–∫—Ä—ã–≤–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–î –∏ Redis...');
        await Promise.allSettled([pool.end(), redisService.quit()]);
        
        // 5. –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        console.log('[Shutdown] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.');
        process.exit(0);
    };
    
    // –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –Ω–∞—à—É –µ–¥–∏–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Å–∏–≥–Ω–∞–ª–∞–º
    process.on('SIGINT', gracefulShutdown);
    process.on('SIGTERM', gracefulShutdown);
}

// index.js

function startBroadcastWorker() {
    console.log('[Broadcast Worker] –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.');
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫: –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    cron.schedule('* * * * *', async () => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è "–∑–∞—Ö–≤–∞—Ç–∞" –∑–∞–¥–∞—á–∏
        const task = await getAndStartPendingBroadcastTask();
        
        if (task) {
            setBroadcasting(true);
            try {
                console.log(`[Broadcast Worker] –ù–∞–π–¥–µ–Ω–∞ –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∑–∞–¥–∞—á–∞ #${task.id}. –ù–∞—á–∏–Ω–∞—é –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ.`);
                let users = [];
                
                // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∞—É–¥–∏—Ç–æ—Ä–∏–∏
                if (task.target_audience === 'all') {
                    users = await getAllUsers(true);
                } else if (task.target_audience === 'free_users') {
                    users = await getActiveFreeUsers();
                } else if (task.target_audience === 'premium_users') {
                    users = await getActivePremiumUsers();
                } else if (task.target_audience === 'preview') {
                    users = [{ id: ADMIN_ID, first_name: 'Admin' }];
                }
                
                const report = await runSingleBroadcast(task, users, task.id);
                await completeBroadcastTask(task.id, report);
                
            } catch (error) {
                console.error(`[Broadcast Worker] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ #${task.id}:`, error);
                await failBroadcastTask(task.id, error.message);
            } finally {
                // –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ (—É—Å–ø–µ—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞) —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
                setBroadcasting(false);
                console.log(`[Broadcast Worker] –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ #${task.id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ.`);
            }
        }
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
startApp();