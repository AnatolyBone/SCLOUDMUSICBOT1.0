// index.js (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø - –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–û)

import express from 'express';
import session from 'express-session';
import compression from 'compression';
import path from 'path';
import multer from 'multer';
import expressLayouts from 'express-ejs-layouts';
import { fileURLToPath } from 'url';
import pgSessionFactory from 'connect-pg-simple';
import pLimit from 'p-limit';
import json2csv from 'json-2-csv';
import fs from 'fs';

import { 
    pool, supabase, getUserById, resetDailyStats, getAllUsers, getPaginatedUsers, 
    getReferralSourcesStats, getDownloadsByDate, getRegistrationsByDate, 
    getActiveUsersByDate, getExpiringUsers, setPremium, updateUserField, 
    getLatestReviews, getUserActivityByDayHour, getDownloadsByUserId, getReferralsByUserId
} from './db.js';
import { bot } from './bot.js';
import redisService from './services/redisClient.js';
import { WEBHOOK_URL, PORT, SESSION_SECRET, ADMIN_ID, ADMIN_LOGIN, ADMIN_PASSWORD, WEBHOOK_PATH } from './config.js';
import { loadTexts } from './config/texts.js';
import { downloadQueue } from './services/downloadManager.js';

const app = express();
const upload = multer({ dest: 'uploads/' });
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const limit = pLimit(1); 

async function startApp() {
    console.log('[App] –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    try {
        await loadTexts(true);
        await redisService.connect();
        setupExpress();
        bot.on('message', (ctx, next) => limit(() => next()));
        if (process.env.NODE_ENV === 'production') {
            const fullWebhookUrl = (WEBHOOK_URL.endsWith('/') ? WEBHOOK_URL.slice(0, -1) : WEBHOOK_URL) + WEBHOOK_PATH;
            const webhookInfo = await bot.telegram.getWebhookInfo();
            if (webhookInfo.url !== fullWebhookUrl) {
                await bot.telegram.setWebhook(fullWebhookUrl, { drop_pending_updates: true });
                console.log('[App] –í–µ–±—Ö—É–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
            } else {
                console.log('[App] –í–µ–±—Ö—É–∫ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.');
            }
            app.use(bot.webhookCallback(WEBHOOK_PATH));
            app.listen(PORT, () => console.log(`‚úÖ [App] –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}.`));
        } else {
            console.log('[App] –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ long-polling...');
            await bot.telegram.deleteWebhook({ drop_pending_updates: true });
            await bot.launch();
        }
        console.log('[App] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ–Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á...');
        setInterval(() => resetDailyStats(), 24 * 3600 * 1000);
        setInterval(() => console.log(`[Monitor] –û—á–µ—Ä–µ–¥—å: ${downloadQueue.size} –≤ –æ–∂–∏–¥–∞–Ω–∏–∏, ${downloadQueue.active} –≤ —Ä–∞–±–æ—Ç–µ.`), 60000);
    } catch (err) {
        console.error('üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ:', err);
        process.exit(1);
    }
}

function setupExpress() {
    console.log('[Express] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express —Å–µ—Ä–≤–µ—Ä–∞...');
    app.use(compression());
    app.use(express.urlencoded({ extended: true }));
    app.use(express.json());
    app.use('/static', express.static(path.join(__dirname, 'public')));
    app.use(expressLayouts);
    app.set('view engine', 'ejs');
    app.set('views', path.join(__dirname, 'views'));
    app.set('layout', 'layout');
    const pgSession = pgSessionFactory(session);
    app.use(session({ store: new pgSession({ pool, tableName: 'session' }), secret: SESSION_SECRET, resave: false, saveUninitialized: false, cookie: { maxAge: 30 * 24 * 60 * 60 * 1000 } }));
    app.use(async (req, res, next) => {
        res.locals.user = null;
        res.locals.page = '';
        if (req.session.authenticated && req.session.userId === ADMIN_ID) {
            try { res.locals.user = await getUserById(req.session.userId); } catch {}
        }
        next();
    });
    const requireAuth = (req, res, next) => {
        if (req.session.authenticated && req.session.userId === ADMIN_ID) return next();
        res.redirect('/admin');
    };
    
    app.get('/health', (req, res) => res.status(200).send('OK'));
    app.get('/admin', (req, res) => {
        if (req.session.authenticated) return res.redirect('/dashboard');
        res.render('login', { title: '–í—Ö–æ–¥', page: 'login', layout: false, error: null });
    });
    app.post('/admin', (req, res) => {
        if (req.body.username === ADMIN_LOGIN && req.body.password === ADMIN_PASSWORD) {
            req.session.authenticated = true;
            req.session.userId = ADMIN_ID;
            res.redirect('/dashboard');
        } else {
            res.render('login', { title: '–í—Ö–æ–¥', error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ', page: 'login', layout: false });
        }
    });
    app.get('/logout', (req, res) => req.session.destroy(() => res.redirect('/admin')));
    
    app.get('/dashboard', requireAuth, async (req, res) => {
        try {
            const [users, referralStats, downloadsRaw, registrationsRaw, activeRaw] = await Promise.all([
                getAllUsers(true), getReferralSourcesStats(), getDownloadsByDate(),
                getRegistrationsByDate(), getActiveUsersByDate()
            ]);
            const stats = {
                total_users: users.length,
                active_users: users.filter(u => u.active).length,
                total_downloads: users.reduce((sum, u) => sum + (u.total_downloads || 0), 0),
                active_today: users.filter(u => u.last_active && new Date(u.last_active).toDateString() === new Date().toDateString()).length
            };
            const prepareChartData = (registrations, downloads, active) => ({
                labels: [...new Set([...Object.keys(registrations), ...Object.keys(downloads), ...Object.keys(active)])].sort(),
                datasets: [ { label: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', data: Object.values(registrations), borderColor: '#198754' }, { label: '–ó–∞–≥—Ä—É–∑–∫–∏', data: Object.values(downloads), borderColor: '#fd7e14' }, { label: '–ê–∫—Ç–∏–≤–Ω—ã–µ', data: Object.values(active), borderColor: '#0d6efd' } ]
            });
            res.render('dashboard', { title: '–î–∞—à–±–æ—Ä–¥', page: 'dashboard', stats, query: req.query, chartDataCombined: prepareChartData(registrationsRaw, downloadsRaw, activeRaw) });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞:", error);
            res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }
    });

    app.get('/users', requireAuth, async (req, res) => {
        try {
            const { q = '', status = '', page = 1, limit = 25, sort = 'created_at', order = 'desc' } = req.query;
            const { users, totalPages, totalUsers } = await getPaginatedUsers({
                searchQuery: q, statusFilter: status, page: parseInt(page), limit: parseInt(limit), sortBy: sort, sortOrder: order
            });
            const queryParams = { q, status, page, limit, sort, order };
            res.render('users', { title: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', page: 'users', users, totalUsers, totalPages, currentPage: parseInt(page), limit: parseInt(limit), searchQuery: q, statusFilter: status, queryParams });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", error);
            res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }
    });

    app.get('/users-table', requireAuth, async (req, res) => {
        try {
            const { q = '', status = '', page = 1, limit = 25, sort = 'created_at', order = 'desc' } = req.query;
            const { users, totalPages } = await getPaginatedUsers({
                searchQuery: q, statusFilter: status, page: parseInt(page), limit: parseInt(limit), sortBy: sort, sortOrder: order
            });
            const queryParams = { q, status, page, limit, sort, order };
            res.render('partials/users-table', { users, totalPages, currentPage: parseInt(page), queryParams, layout: false });
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã:", error);
            res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }
    });
    
    app.get('/user/:id', requireAuth, async (req, res) => {
        try {
            const userId = req.params.id;
            const [userProfile, downloads, referrals] = await Promise.all([ getUserById(userId), getDownloadsByUserId(userId), getReferralsByUserId(userId) ]);
            if (!userProfile) {
                return res.status(404).render('user-profile', { title: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', page: 'users', userProfile: null, downloads: [], referrals: [] });
            }
            res.render('user-profile', { title: `–ü—Ä–æ—Ñ–∏–ª—å: ${userProfile.first_name || userId}`, page: 'users', userProfile, downloads, referrals });
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${req.params.id}:`, error);
            res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }
    });
    
    app.get('/broadcast', requireAuth, (req, res) => { 
        res.render('broadcast-form', { title: '–†–∞—Å—Å—ã–ª–∫–∞', page: 'broadcast', error: null, success: null }); 
    });

    // –í –§–ê–ô–õ–ï index.js

// >>>>> –ó–ê–ú–ï–ù–ò–¢–ï –í–ï–°–¨ –ë–õ–û–ö app.post('/broadcast', ...) –ù–ê –≠–¢–û–¢ <<<<<

app.post('/broadcast', requireAuth, upload.single('audio'), async (req, res) => {
    const { message } = req.body;
    const audioFile = req.file;
    
    if (!message) {
        return res.render('broadcast-form', { title: '–†–∞—Å—Å—ã–ª–∫–∞', page: 'broadcast', error: '–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.', success: null });
    }
    
    try {
        const users = await getAllUsers(true);
        res.render('broadcast-form', {
            title: '–†–∞—Å—Å—ã–ª–∫–∞',
            page: 'broadcast',
            error: null,
            success: `–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è ${users.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...`
        });
        
        (async () => {
            console.log(`[Broadcast] –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`);
            let successCount = 0;
            let errorCount = 0;
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–∑–æ–≤—ã–π Markdown –≤ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π HTML
            let safeMessage = message
                .replace(/\*(.*?)\*/g, '<b>$1</b>') // *–∂–∏—Ä–Ω—ã–π* -> <b>–∂–∏—Ä–Ω—ã–π</b>
                .replace(/_(.*?)_/g, '<i>$1</i>') // _–∫—É—Ä—Å–∏–≤_ -> <i>–∫—É—Ä—Å–∏–≤</i>
                .replace(/`(.*?)`/g, '<code>$1</code>'); // `–∫–æ–¥` -> <code>–∫–æ–¥</code>
            
            for (const user of users) {
                try {
                    const options = { parse_mode: 'HTML' }; // <<< –ò–°–ü–û–õ–¨–ó–£–ï–ú HTML
                    
                    if (audioFile) {
                        options.caption = safeMessage;
                        await bot.telegram.sendAudio(user.id, { source: audioFile.path }, options);
                    } else {
                        await bot.telegram.sendMessage(user.id, safeMessage, options);
                    }
                    successCount++;
                } catch (e) {
                    errorCount++;
                    if (e.response?.error_code === 403) {
                        await updateUserField(user.id, 'active', false);
                    } else {
                        // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –≤ —á–µ–º –¥–µ–ª–æ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑
                        console.error(`[Broadcast] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è user ${user.id}:`, e.message);
                    }
                }
                await new Promise(resolve => setTimeout(resolve, 50));
            }
            console.log(`[Broadcast] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–∫–∏: ${errorCount}`);
            if (audioFile) {
                fs.unlink(audioFile.path, (err) => {
                    if (err) console.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Ä–∞—Å—Å—ã–ª–∫–∏:", err);
                });
            }
        })();
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏:', e);
        res.render('broadcast-form', { title: '–†–∞—Å—Å—ã–ª–∫–∞', page: 'broadcast', error: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏.', success: null });
    }
});

    app.get('/expiring-users', requireAuth, async (req, res) => {
        try {
            const users = await getExpiringUsers();
            res.render('expiring-users', { title: '–ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏', page: 'expiring-users', users });
        } catch(e) {
            res.status(500).send("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞");
        }
    });

    app.post('/set-tariff', requireAuth, async (req, res) => {
        const { userId, limit, days } = req.body;
        try {
            await setPremium(userId, parseInt(limit), parseInt(days) || 30);
            let tariffName = '';
            const newLimit = parseInt(limit);
            if (newLimit <= 5) tariffName = 'Free';
            else if (newLimit <= 30) tariffName = 'Plus';
            else if (newLimit <= 100) tariffName = 'Pro';
            else tariffName = 'Unlimited';
            const message = `üéâ –í–∞—à —Ç–∞—Ä–∏—Ñ –±—ã–ª –æ–±–Ω–æ–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!\n\n–ù–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ: *${tariffName}* (${newLimit} –∑–∞–≥—Ä—É–∑–æ–∫/–¥–µ–Ω—å).\n–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è: *${parseInt(days) || 30} –¥–Ω–µ–π*.`;
            await bot.telegram.sendMessage(userId, message, { parse_mode: 'Markdown' });
        } catch (error) {
            console.error(`[Admin] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è ${userId}:`, error.message);
        }
        res.redirect(req.get('Referrer') || '/users');
    });

    app.post('/reset-bonus', requireAuth, async (req, res) => {
        const { userId } = req.body;
        if (userId) { await updateUserField(userId, 'subscribed_bonus_used', false); }
        res.redirect(req.get('Referrer') || '/users');
    });

    app.post('/reset-daily-limit', requireAuth, async (req, res) => {
        const { userId } = req.body;
        if (userId) {
            await updateUserField(userId, 'downloads_today', 0);
            await updateUserField(userId, 'tracks_today', '[]');
        }
        res.redirect(req.get('Referrer') || '/users');
    });
}

async function stopBot(signal) {
    console.log(`[App] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ù–∞—á–∏–Ω–∞—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...`);
    try {
        if (bot.polling?.isRunning()) bot.stop(signal);
        const promises = [];
        if (redisService.client?.isOpen) promises.push(redisService.client.quit());
        promises.push(pool.end());
        await Promise.allSettled(promises);
        console.log('[App] –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã. –í—ã—Ö–æ–¥.');
        process.exit(0);
    } catch (e) {
        console.error('üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', e);
        process.exit(1);
    }
}

process.once('SIGINT', () => stopBot('SIGINT'));
process.once('SIGTERM', () => stopBot('SIGTERM'));

startApp();