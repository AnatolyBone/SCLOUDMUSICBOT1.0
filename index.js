// index.js

// === –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ –∏ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ===
import express from 'express';
import session from 'express-session';
import compression from 'compression';
import path from 'path';
import fs from 'fs';
import multer from 'multer';
import expressLayouts from 'express-ejs-layouts';
import { fileURLToPath } from 'url';
import { Telegraf, Markup } from 'telegraf';
import { createClient } from 'redis';
import pgSessionFactory from 'connect-pg-simple';
import ytdl from 'youtube-dl-exec';

// === –ò–º–ø–æ—Ä—Ç—ã –º–æ–¥—É–ª–µ–π –ù–ê–®–ï–ì–û –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
import { pool, supabase, createUser, getUser, updateUserField, setPremium, getAllUsers, resetDailyStats, saveTrackForUser, getLatestReviews, resetDailyLimitIfNeeded, findCachedTrack, cacheTrack } from './db.js';
import { enqueue, downloadQueue } from './services/downloadManager.js';
import { T, loadTexts, allTextsSync } from './config/texts.js';

// === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ===
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_ID = Number(process.env.ADMIN_ID);
const WEBHOOK_URL = process.env.WEBHOOK_URL;
const WEBHOOK_PATH = '/telegram';
const PORT = process.env.PORT ?? 3000;
const SESSION_SECRET = process.env.SESSION_SECRET || 'a-very-secret-key-for-session';
const ADMIN_LOGIN = process.env.ADMIN_LOGIN;
const ADMIN_PASSWORD = process.env.ADMIN_PASSWORD;
const STORAGE_CHANNEL_ID = process.env.STORAGE_CHANNEL_ID;

if (!BOT_TOKEN || !ADMIN_ID || !ADMIN_LOGIN || !ADMIN_PASSWORD || !WEBHOOK_URL || !STORAGE_CHANNEL_ID) {
    console.error('‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    process.exit(1);
}

// === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –∏ —É—Ç–∏–ª–∏—Ç—ã ===
// <<< –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω —Ç–∞–π–º–∞—É—Ç –¥–ª—è Telegraf, —á—Ç–æ–±—ã –æ–Ω –∂–¥–∞–ª –¥–æ–ª—å—à–µ >>>
const bot = new Telegraf(BOT_TOKEN, {
    handlerTimeout: 90_000 // 90 —Å–µ–∫—É–Ω–¥
});
const app = express();
const upload = multer({ dest: 'uploads/' });
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const cacheDir = path.join(__dirname, 'cache');
let redisClient = null;

export function getRedisClient() {
    if (!redisClient) throw new Error('Redis –∫–ª–∏–µ–Ω—Ç –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return redisClient;
}

// <<< –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–û: –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –º–µ–Ω—é >>>
function getTariffName(limit) {
    if (limit >= 1000) return 'Unlim (‚àû/–¥–µ–Ω—å)';
    if (limit >= 50) return 'Pro (50/–¥–µ–Ω—å)';
    if (limit >= 20) return 'Plus (30/–¥–µ–Ω—å)'; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ 30, –∫–∞–∫ –≤ —Ç–µ–∫—Å—Ç–∞—Ö
    return 'Free (5/–¥–µ–Ω—å)';
}

function getDaysLeft(premiumUntil) {
    if (!premiumUntil) return 0;
    const diff = new Date(premiumUntil) - new Date();
    return Math.max(Math.ceil(diff / 86400000), 0);
}

function formatMenuMessage(user, ctx) {
    const tariffLabel = getTariffName(user.premium_limit);
    const downloadsToday = user.downloads_today || 0;
    const invited = user.referred_count || 0;
    const refLink = `https://t.me/${ctx.botInfo.username}?start=${user.id}`;
    const daysLeft = getDaysLeft(user.premium_until);

    return `
üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name}!

–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:
üíº –¢–∞—Ä–∏—Ñ: ${tariffLabel}
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: ${daysLeft}
üéß –°–µ–≥–æ–¥–Ω—è —Å–∫–∞—á–∞–Ω–æ: ${downloadsToday} –∏–∑ ${user.premium_limit}

üë´ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: ${invited}

üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–∑–µ–π:
\`${refLink}\`

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫ –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç —Å SoundCloud, –∏ —è –µ–≥–æ —Å–∫–∞—á–∞—é!
`.trim();
}

async function startApp() {
    console.log('[App] –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...');
    try {
        await loadTexts(true); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç—ã –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
        
        const client = createClient({ url: process.env.REDIS_URL, socket: { connectTimeout: 10000 } });
        client.on('error', (err) => console.error('üî¥ –û—à–∏–±–∫–∞ Redis:', err));
        await client.connect();
        redisClient = client;
        console.log('‚úÖ [App] Redis –ø–æ–¥–∫–ª—é—á—ë–Ω');

        if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir);

        setupExpress();
        setupTelegramBot();
        
        setInterval(() => resetDailyStats(), 24 * 3600 * 1000);
        setInterval(() => console.log(`[Monitor] –û—á–µ—Ä–µ–¥—å: ${downloadQueue.size} –≤ –æ–∂–∏–¥–∞–Ω–∏–∏, ${downloadQueue.activeTasks} –≤ —Ä–∞–±–æ—Ç–µ.`), 60000);
        
        if (process.env.NODE_ENV === 'production') {
            app.use(await bot.createWebhook({ domain: WEBHOOK_URL, path: WEBHOOK_PATH }));
            app.listen(PORT, () => console.log(`‚úÖ [App] –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}.`));
        } else {
            await bot.launch();
            console.log('‚úÖ [App] –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ long-polling.');
        }
        
        console.log('[App] –§–æ–Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω.');
        // startIndexer().catch(err => console.error("üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –∏–Ω–¥–µ–∫—Å–∞—Ç–æ—Ä–µ:", err));
    } catch (err) {
        console.error('üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', err);
        process.exit(1);
    }
}

function setupExpress() {
    console.log('[Express] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Express —Å–µ—Ä–≤–µ—Ä–∞...');
    app.use(compression());
    app.use(express.urlencoded({ extended: true }));
    app.use(express.json());
    app.set('view engine', 'ejs');
    
    // ... –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ setupExpress –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    
    app.get('/health', (req, res) => res.status(200).send('OK'));
    app.get('/broadcast', (req, res) => res.render('broadcast-form', { title: '–†–∞—Å—Å—ã–ª–∫–∞', error: null, success: null }));
    // ...
}

function setupTelegramBot() {
    console.log('[Telegraf] –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –±–æ—Ç–∞...');

    bot.catch((err, ctx) => {
        console.error(`üî¥ [Telegraf] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è update ${ctx.update.update_id}:`, err);
    });

    bot.use(async (ctx, next) => {
        const userId = ctx.from?.id;
        if (!userId) return next();
        try {
            ctx.state.user = await getUser(userId, ctx.from.first_name, ctx.from.username);
        } catch (error) { console.error(`–û—à–∏–±–∫–∞ –≤ –º–∏–¥–ª–≤–∞—Ä–µ –¥–ª—è ${userId}:`, error); }
        return next();
    });

    bot.start(async (ctx) => {
        console.log(`[Bot] /start –æ—Ç ${ctx.from.id}`);
        try {
            await createUser(ctx.from.id, ctx.from.first_name, ctx.from.username, ctx.startPayload || null);
            await ctx.reply(T('start'), kb());
        } catch (e) { console.error(e); }
    });

    bot.hears(T('menu'), async (ctx) => {
        console.log(`[Bot] "–ú–µ–Ω—é" –æ—Ç ${ctx.from.id}`);
        try {
            const user = await getUser(ctx.from.id);
            await ctx.replyWithMarkdown(formatMenuMessage(user, ctx), kb()); 
        } catch (e) { console.error(e); }
    });
    
    bot.hears(T('mytracks'), async (ctx) => {
        console.log(`[Bot] "–ú–æ–∏ —Ç—Ä–µ–∫–∏" –æ—Ç ${ctx.from.id}`);
        try {
            const user = await getUser(ctx.from.id);
            let tracks = [];
            try { if (user.tracks_today) tracks = JSON.parse(user.tracks_today); } catch {}
            if (!tracks.length) return await ctx.reply(T('noTracks'), kb());
            
            for (let i = 0; i < tracks.length; i += 10) {
                const chunk = tracks.slice(i, i + 10).filter(t => t.fileId);
                if (chunk.length > 0) {
                    await ctx.replyWithMediaGroup(chunk.map(t => ({ type: 'audio', media: t.fileId })));
                }
            }
        } catch (e) { console.error(e); }
    });

    bot.hears(T('help'), async (ctx) => {
        console.log(`[Bot] "–ü–æ–º–æ—â—å" –æ—Ç ${ctx.from.id}`);
        await ctx.reply(T('helpInfo'), kb());
    });

    bot.hears(T('upgrade'), async (ctx) => {
        console.log(`[Bot] "–†–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç" –æ—Ç ${ctx.from.id}`);
        await ctx.reply(T('upgradeInfo'), kb());
    });
    
    bot.on('text', async (ctx) => {
        const userId = ctx.from.id;
        const userText = ctx.message.text;

        if (Object.values(allTextsSync()).includes(userText)) {
            return;
        }

        console.log(`[Bot] –ü–æ–ª—É—á–µ–Ω–æ –ù–ï–∫–æ–º–∞–Ω–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userId}, –∏—â–µ–º —Å—Å—ã–ª–∫—É...`);
        try {
            const url = userText.match(/(https?:\/\/[^\s]+)/g)?.find(u => u.includes('soundcloud.com'));
            if (url) {
                await enqueue(ctx, userId, url);
            } else {
                await ctx.reply('–Ø –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.');
            }
        } catch (e) {
            console.error(`[Bot] –û—à–∏–±–∫–∞ –≤ –æ–±—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è ${userId}:`, e);
            await ctx.reply(T('error')).catch(() => {});
        }
    });
}

async function stopBot(signal) {
    console.log(`[App] –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª ${signal}. –ù–∞—á–∏–Ω–∞—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...`);
    try {
        if (bot.polling?.isRunning()) bot.stop(signal);
        const promises = [];
        if (redisClient?.isOpen) promises.push(redisClient.quit());
        promises.push(pool.end());
        await Promise.allSettled(promises);
        console.log('[App] –í—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∑–∞–∫—Ä—ã—Ç—ã. –í—ã—Ö–æ–¥.');
        process.exit(0);
    } catch (e) {
        console.error('üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã:', e);
        process.exit(1);
    }
}

process.once('SIGINT', () => stopBot('SIGINT'));
process.once('SIGTERM', () => stopBot('SIGTERM'));

startApp();

export { app, bot, startApp };