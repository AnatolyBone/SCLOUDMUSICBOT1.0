// services/spotifyManager.js (–§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø)

import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import { SPOTIPY_CLIENT_ID, SPOTIPY_CLIENT_SECRET } from '../config.js';
import { downloadQueue } from './downloadManager.js';
import { logEvent } from '../db.js';

const execAsync = promisify(exec);
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(path.dirname(__filename));

async function ensureDirectoryExists(dirPath) {
    try {
        await fs.access(dirPath);
    } catch (error) {
        if (error.code === 'ENOENT') {
            console.log(`[Spotify Manager] –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dirPath} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—é...`);
            await fs.mkdir(dirPath, { recursive: true });
        } else {
            throw error;
        }
    }
}

export async function spotifyEnqueue(ctx, userId, url) {
    let statusMessage = null;
    let tempFilePath = null;
    try {
        statusMessage = await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É Spotify...');

        const uploadDir = path.join(__dirname, '..', 'uploads');
        await ensureDirectoryExists(uploadDir);

        const tempFileName = `spotify_${userId}_${Date.now()}.spotdl`;
        tempFilePath = path.join(uploadDir, tempFileName);

        const command = `spotdl save "${url}" --save-file "${tempFilePath}"`;
        console.log(`[Spotify Manager] –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è ${userId}: ${command}`);

        await execAsync(command, {
            env: { ...process.env, SPOTIPY_CLIENT_ID, SPOTIPY_CLIENT_SECRET }
        });

        const fileContent = await fs.readFile(tempFilePath, 'utf-8');
        const tracksMeta = JSON.parse(fileContent);

        if (!tracksMeta || tracksMeta.length === 0) {
            return await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ Spotify.');
        }

        await ctx.telegram.editMessageText(ctx.chat.id, statusMessage.message_id, undefined, `‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: ${tracksMeta.length}. –î–æ–±–∞–≤–ª—è—é –≤ –æ—á–µ—Ä–µ–¥—å...`);

        if (tracksMeta.length > 1) {
            await logEvent(userId, 'spotify_playlist_album');
        } else {
            await logEvent(userId, 'spotify_track');
        }

        for (const track of tracksMeta) {
            // –§–û–†–ú–ò–†–£–ï–ú –ü–û–ò–°–ö–û–í–´–ô –ó–ê–ü–†–û–° –î–õ–Ø YT-DLP
            const searchQuery = `${track.artists.join(' ')} - ${track.name}`;
            const task = {
                userId,
                source: 'spotify',
                // –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º –Ω–µ —Å—Å—ã–ª–∫—É Spotify, –∞ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å!
                // ytsearch1: –≥–æ–≤–æ—Ä–∏—Ç yt-dlp –∏—Å–∫–∞—Ç—å –Ω–∞ YouTube –∏ –±—Ä–∞—Ç—å –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ.
                url: `ytsearch1:"${searchQuery}"`, 
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
                originalUrl: track.url,
                metadata: {
                    title: track.name,
                    uploader: track.artists.join(', '),
                    duration: Math.round(track.duration / 1000),
                    thumbnail: track.cover_url,
                    id: track.song_id // Spotify ID
                }
            };
            downloadQueue.add(task);
        }

    } catch (error) {
        console.error(`[Spotify Manager] –û—à–∏–±–∫–∞ –¥–ª—è ${userId} —Å URL ${url}:`, error.stderr || error);
        if (statusMessage) {
            await ctx.telegram.editMessageText(ctx.chat.id, statusMessage.message_id, undefined, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ Spotify. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        } else {
             await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ Spotify. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    } finally {
        if (tempFilePath) {
            await fs.unlink(tempFilePath).catch(e => console.error(`–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª ${tempFilePath}`, e));
        }
    }
}