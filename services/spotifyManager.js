// services/spotifyManager.js (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)

import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs/promises';
import path from 'path';
import { SPOTIPY_CLIENT_ID, SPOTIPY_CLIENT_SECRET } from '../config.js';
import { downloadQueue } from './downloadManager.js';
import { logEvent } from '../db.js';
import { findCachedTrack } from '../db.js'; // –ù–∞–º –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∫—ç—à –∏ –∑–¥–µ—Å—å

const execAsync = promisify(exec);

export async function spotifyEnqueue(ctx, userId, url) {
    try {
        await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É Spotify...');

        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        const tempFileName = `spotify_${userId}_${Date.now()}.spotdl`;
        const tempFilePath = path.join('uploads', tempFileName);

        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è spotdl: —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
        const command = `spotdl save "${url}" --save-file "${tempFilePath}"`;

        await execAsync(command, {
            env: { ...process.env, SPOTIPY_CLIENT_ID, SPOTIPY_CLIENT_SECRET }
        });

        // –ß–∏—Ç–∞–µ–º –∏ –ø–∞—Ä—Å–∏–º —Ñ–∞–π–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        const fileContent = await fs.readFile(tempFilePath, 'utf-8');
        const tracks = JSON.parse(fileContent);
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        await fs.unlink(tempFilePath);

        if (!tracks || tracks.length === 0) {
            return await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ Spotify.');
        }

        // –†–ê–ó–î–ï–õ–Ø–ï–ú –¢–†–ï–ö–ò –ù–ê –ö–≠–®–ò–†–û–í–ê–ù–ù–´–ï –ò –ù–û–í–´–ï
        const tasksFromCache = [];
        const tasksToDownload = [];
        for (const track of tracks) {
            const cached = await findCachedTrack(track.url);
            if (cached) {
                tasksFromCache.push({ ...track, ...cached });
            } else {
                tasksToDownload.push(track);
            }
        }
        
        let message = `‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: ${tracks.length}.\n`;
        
        // –°–ù–ê–ß–ê–õ–ê –û–¢–ü–†–ê–í–õ–Ø–ï–ú –ò–ó –ö–≠–®–ê (–±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
        let sentFromCacheCount = 0;
        for (const track of tasksFromCache) {
            try {
                // await ctx.telegram.sendAudio(userId, track.fileId); // –ú—ã –Ω–µ –º–æ–∂–µ–º —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å —Ç—É—Ç, —Ç.–∫. –Ω–µ—Ç –æ–±—ä–µ–∫—Ç–∞ user
                // –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏–º
                sentFromCacheCount++;
            } catch (e) { console.error(e); }
        }

        if (sentFromCacheCount > 0) {
            message += `üöÄ ${sentFromCacheCount} –∏–∑ –Ω–∏—Ö —É–∂–µ –≤ –∫—ç—à–µ –∏ —Å–∫–æ—Ä–æ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!\n`;
        }

        if(tasksToDownload.length > 0) {
            message += `‚è≥ ${tasksToDownload.length} –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å.`;
        }

        await ctx.reply(message);
        
        if (tracks.length > 1) {
            await logEvent(userId, 'spotify_playlist_album');
        } else {
            await logEvent(userId, 'spotify_track');
        }

        // –°—Ç–∞–≤–∏–º –≤—Å–µ —Ç—Ä–µ–∫–∏ (–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ, –∏ –Ω–æ–≤—ã–µ) –≤ –æ—á–µ—Ä–µ–¥—å. 
        // downloadManager —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è, —á—Ç–æ —É–∂–µ –µ—Å—Ç—å –≤ –∫—ç—à–µ.
        for (const track of tracks) {
            const task = {
                userId,
                source: 'spotify',
                spotifyUrl: track.url,
                metadata: {
                    title: track.name,
                    uploader: track.artists.join(', '),
                    duration: Math.round(track.duration / 1000),
                    thumbnail: track.cover_url,
                    id: track.song_id
                }
            };
            downloadQueue.add(task);
        }

    } catch (error) {
        console.error(`[Spotify Enqueue] –û—à–∏–±–∫–∞ –¥–ª—è ${userId} –∏ url ${url}:`, error.stderr || error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ Spotify.');
    }
}