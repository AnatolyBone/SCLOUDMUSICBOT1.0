// services/spotifyManager.js

import { exec } from 'child_process';
import { promisify } from 'util';
import { SPOTIPY_CLIENT_ID, SPOTIPY_CLIENT_SECRET } from '../config.js';
import { downloadQueue } from './downloadManager.js';
import { logEvent } from '../db.js';

const execAsync = promisify(exec);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á –∏–∑ Spotify –≤ –æ–±—â—É—é –æ—á–µ—Ä–µ–¥—å
export async function spotifyEnqueue(ctx, userId, url) {
    try {
        await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É Spotify...');

        // –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è spotdl: –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –≤ –≤–∏–¥–µ JSON, –Ω–µ —Å–∫–∞—á–∏–≤–∞—è —Ñ–∞–π–ª—ã
        const command = `spotdl --print-json "${url}"`;

        const { stdout } = await execAsync(command, {
            env: {
                ...process.env,
                SPOTIPY_CLIENT_ID,
                SPOTIPY_CLIENT_SECRET
            }
        });

        // spotdl –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ JSON-–æ–±—ä–µ–∫—Ç–æ–≤, –ø–æ –æ–¥–Ω–æ–º—É –Ω–∞ —Å—Ç—Ä–æ–∫—É
        const tracks = stdout.trim().split('\n').map(line => JSON.parse(line));

        if (!tracks || tracks.length === 0) {
            return await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ Spotify.');
        }

        await ctx.reply(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: ${tracks.length}. –î–æ–±–∞–≤–ª—è—é –≤ –æ—á–µ—Ä–µ–¥—å...`);
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
        if (tracks.length > 1) {
            await logEvent(userId, 'spotify_playlist_album');
        } else {
            await logEvent(userId, 'spotify_track');
        }

        // –°—Ç–∞–≤–∏–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–∫ –≤ –Ω–∞—à—É –°–£–©–ï–°–¢–í–£–Æ–©–£–Æ –æ—á–µ—Ä–µ–¥—å
        for (const track of tracks) {
            // –§–æ—Ä–º–∏—Ä—É–µ–º "–∑–∞–¥–∞—á—É" –≤ –ø–æ–Ω—è—Ç–Ω–æ–º –¥–ª—è downloadManager —Ñ–æ—Ä–º–∞—Ç–µ
            const task = {
                userId,
                source: 'spotify', // –ù–æ–≤—ã–π —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –≤–æ—Ä–∫–µ—Ä –∑–Ω–∞–ª, –æ—Ç–∫—É–¥–∞ –∑–∞–¥–∞—á–∞
                spotifyUrl: track.url, // –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç—Ä–µ–∫
                metadata: {
                    title: track.name,
                    uploader: track.artists.join(', '),
                    duration: Math.round(track.duration / 1000), // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –º—Å –≤ —Å–µ–∫—É–Ω–¥—ã
                    thumbnail: track.cover_url,
                    id: track.song_id // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID Spotify
                }
            };
            downloadQueue.add(task);
        }
    } catch (error) {
        console.error(`[Spotify Enqueue] –û—à–∏–±–∫–∞ –¥–ª—è ${userId} –∏ url ${url}:`, error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ Spotify. –í–æ–∑–º–æ–∂–Ω–æ, —Å—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞ –∏–ª–∏ —Ç—Ä–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
    }
}