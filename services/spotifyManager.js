// services/spotifyManager.js

import { exec } from 'child_process';
import { promisify } from 'util';
import fs from 'fs/promises';
import path from 'path';
import { fileURLToPath } from 'url';
import { SPOTIPY_CLIENT_ID, SPOTIPY_CLIENT_SECRET } from '../config.js';
import { downloadQueue } from './downloadManager.js';
import { logEvent } from '../db.js';

const execAsync = promisify(exec);

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
async function ensureDirectoryExists(dirPath) {
    try {
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏. –ï—Å–ª–∏ –µ–µ –Ω–µ—Ç, –≤–æ–∑–Ω–∏–∫–Ω–µ—Ç –æ—à–∏–±–∫–∞.
        await fs.access(dirPath);
    } catch (error) {
        // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ "ENOENT" (Error NO ENTry), –∑–Ω–∞—á–∏—Ç, –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–µ—Ç
        if (error.code === 'ENOENT') {
            console.log(`[Spotify Manager] –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è ${dirPath} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å–æ–∑–¥–∞—é...`);
            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –≤–∫–ª—é—á–∞—è –≤—Å–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞–ø–∫–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await fs.mkdir(dirPath, { recursive: true });
        } else {
            // –ï—Å–ª–∏ –¥—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–µ –¥–∞–ª—å—à–µ
            throw error;
        }
    }
}

export async function spotifyEnqueue(ctx, userId, url) {
    // –í—ã—á–∏—Å–ª—è–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É config.toml, –∫–æ—Ç–æ—Ä—ã–π –ª–µ–∂–∏—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞.
    // –≠—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±, —á—Ç–æ–±—ã spotdl –µ–≥–æ —Ç–æ—á–Ω–æ –Ω–∞—à–µ–ª.
    const __filename = fileURLToPath(import.meta.url);
    const __dirname = path.dirname(__filename);
    const configPath = path.resolve(__dirname, '..', 'config.toml');

    try {
        await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É Spotify...');

        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'uploads' –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        const uploadDir = 'uploads';
        await ensureDirectoryExists(uploadDir);

        const tempFileName = `spotify_${userId}_${Date.now()}.spotdl`;
        const tempFilePath = path.join(uploadDir, tempFileName);

        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É. –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–µ—Ä–µ–¥–∞–¥–∏–º —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
        const command = `spotdl save "${url}" --save-file "${tempFilePath}"`;
        
        console.log(`[Spotify Manager] –í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è ${userId}: ${command}`);

        // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        // –∏ —Å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π SPOTDL_CONFIG_PATH –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø—É—Ç–∏ –∫ –∫–æ–Ω—Ñ–∏–≥—É.
        await execAsync(command, {
            env: { 
                ...process.env, 
                SPOTIPY_CLIENT_ID, 
                SPOTIPY_CLIENT_SECRET,
                SPOTDL_CONFIG_PATH: configPath 
            }
        });

        // –ß–∏—Ç–∞–µ–º –∏ —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        const fileContent = await fs.readFile(tempFilePath, 'utf-8');
        await fs.unlink(tempFilePath);

        const tracks = JSON.parse(fileContent);

        if (!tracks || tracks.length === 0) {
            return await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ Spotify.');
        }

        await ctx.reply(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: ${tracks.length}. –î–æ–±–∞–≤–ª—è—é –≤ –æ—á–µ—Ä–µ–¥—å...`);

        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
        if (tracks.length > 1) {
            await logEvent(userId, 'spotify_playlist_album');
        } else {
            await logEvent(userId, 'spotify_track');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–∫ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ
        for (const track of tracks) {
            const task = {
                userId,
                source: 'spotify',
                spotifyUrl: track.url, // URL –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ downloadManager
                metadata: {
                    title: track.name,
                    uploader: track.artists.join(', '),
                    duration: Math.round(track.duration / 1000),
                    thumbnail: track.cover_url,
                    id: track.song_id
                }
            };
            downloadQueue.add(task);
        }

    } catch (error) {
        // –†–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        console.error(`[Spotify Manager] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å URL ${url}.`);

        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –≤—ã–≤–æ–¥ (stdout), –∏–Ω–æ–≥–¥–∞ —Ç–∞–º —Ç–æ–∂–µ –±—ã–≤–∞–µ—Ç –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if (error.stdout) {
            console.error('STDOUT:', error.stdout);
        }

        // –í—ã–≤–æ–¥–∏–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ç–æ–∫ –æ—à–∏–±–æ–∫ (stderr), —ç—Ç–æ —Å–∞–º–æ–µ –≤–∞–∂–Ω–æ–µ
        if (error.stderr) {
            console.error('STDERR:', error.stderr);
        }

        // –í—ã–≤–æ–¥–∏–º –≤–µ—Å—å –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ stderr –∏ stdout –ø—É—Å—Ç—ã
        if (!error.stdout && !error.stderr) {
            console.error('–ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏:', error);
        }

        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ Spotify. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    }
}