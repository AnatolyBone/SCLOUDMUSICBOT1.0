// services/spotifyManager.js (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–Ø –ë–ï–ó SPOTDL)

import ytdl from 'youtube-dl-exec';
import { PROXY_URL } from '../config.js';
import { downloadQueue } from './downloadManager.js';
import { logEvent } from '../db.js';

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
function sanitizeFilename(name) {
    return (name || 'track').replace(/[<>:"/\\|?*]+/g, '').trim();
}

export async function spotifyEnqueue(ctx, userId, url) {
    let statusMessage = null;
    try {
        statusMessage = await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É Spotify...');

        // –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é ytdl (–æ–Ω —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ Spotify)
        const info = await ytdl(url, {
            dumpSingleJson: true,
            retries: 2,
            "socket-timeout": 120,
            proxy: PROXY_URL || undefined
        });
        
        if (!info) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ Spotify.');

        const isPlaylist = Array.isArray(info.entries);
        const entries = isPlaylist ? info.entries : [info];

        const tracks = entries
            .filter(e => e && (e.webpage_url || e.url))
            .map(track => ({
                userId,
                source: 'spotify',
                url: track.webpage_url || track.url, // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ Spotify
                metadata: {
                    title: sanitizeFilename(track.title || 'Unknown Title'),
                    uploader: track.artist || track.uploader || 'Unknown Artist',
                    duration: Math.round(track.duration),
                    thumbnail: track.thumbnail,
                    id: track.id
                }
            }));

        if (!tracks || tracks.length === 0) {
            return await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç—Ä–µ–∫–∏ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ Spotify.');
        }

        await ctx.telegram.editMessageText(ctx.chat.id, statusMessage.message_id, undefined, `‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç—Ä–µ–∫–æ–≤: ${tracks.length}. –î–æ–±–∞–≤–ª—è—é –≤ –æ—á–µ—Ä–µ–¥—å...`);

        if (tracks.length > 1) {
            await logEvent(userId, 'spotify_playlist_album');
        } else {
            await logEvent(userId, 'spotify_track');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Ç—Ä–µ–∫ –≤ –Ω–∞—à—É –µ–¥–∏–Ω—É—é –æ—á–µ—Ä–µ–¥—å
        for (const task of tracks) {
            downloadQueue.add(task);
        }

    } catch (error) {
        console.error(`[Spotify Manager] –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å URL ${url}.`);
        if (error.stderr) {
            console.error('STDERR:', error.stderr);
        } else {
            console.error('–ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏:', error);
        }
        if (statusMessage) {
            await ctx.telegram.editMessageText(ctx.chat.id, statusMessage.message_id, undefined, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ Spotify. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        } else {
            await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏ Spotify. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
        }
    }
}