// services/broadcastManager.js (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)

import pTimeout from 'p-timeout'; // <-- 1. –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º "–±—É–¥–∏–ª—å–Ω–∏–∫"
import { ADMIN_ID } from '../config.js';
import { logBroadcastSent, updateUserField, getBroadcastProgress } from '../db.js';

// –§–∏–Ω–∞–ª—å–Ω–∞—è, "–ø—É–ª–µ–Ω–µ–ø—Ä–æ–±–∏–≤–∞–µ–º–∞—è" —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –û–î–ù–û–ô –ø–∞—á–∫–∏
export async function runBroadcastBatch(bot, task, users) {
    const sendPromises = users.map(async (user) => {
        try {
            // 2. –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤—Å—é –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ —Ç–∞–π–º–∞—É—Ç (15 —Å–µ–∫—É–Ω–¥)
            await pTimeout((async () => {
                const personalMessage = (task.message || '').replace(/{first_name}/g, user.first_name || '–¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥');
                const options = { parse_mode: 'HTML', disable_web_page_preview: task.disable_web_page_preview, disable_notification: task.disable_notification };
                if (task.keyboard?.length > 0) options.reply_markup = { inline_keyboard: task.keyboard };
                
                const fileId = task.file_id;
                if (fileId) {
                    if (personalMessage) options.caption = personalMessage;
                    const mimeType = task.file_mime_type || '';
                    if (mimeType.startsWith('image/')) await bot.telegram.sendPhoto(user.id, fileId, options);
                    else if (mimeType.startsWith('video/')) await bot.telegram.sendVideo(user.id, fileId, options);
                    else if (mimeType.startsWith('audio/')) await bot.telegram.sendAudio(user.id, fileId, options);
                    else await bot.telegram.sendDocument(user.id, fileId, options);
                } else if (personalMessage) {
                    await bot.telegram.sendMessage(user.id, personalMessage, options);
                }
            })(), { milliseconds: 15000 }); // –¢–∞–π–º–∞—É—Ç 15 —Å–µ–∫—É–Ω–¥

            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            if (task.id) {
                await logBroadcastSent(task.id, user.id);
            }
            return { status: 'ok', userId: user.id };

        } catch (e) {
            // 3. –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ (–æ—à–∏–±–∫–∞ 403) –∏–ª–∏ —É–¥–∞–ª–∏–ª —á–∞—Ç (–æ—à–∏–±–∫–∞ 400)
            if (e.response?.error_code === 403 || e.response?.description?.includes('chat not found')) {
                // "–ú—è–≥–∫–æ" –ø–æ–º–µ—á–∞–µ–º –µ–≥–æ, –ù–ï –±–ª–æ–∫–∏—Ä—É—è –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É
                await updateUserField(user.id, { can_receive_broadcasts: false });
            }
            
            // –í–ê–ñ–ù–û: –í –ª—é–±–æ–º —Å–ª—É—á–∞–µ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ –≤–µ—á–Ω—ã–π —Ü–∏–∫–ª
            if (task.id) {
                await logBroadcastSent(task.id, user.id);
            }
            return { status: 'error', userId: user.id, reason: e.message };
        }
    });

    await Promise.allSettled(sendPromises);
}

// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –æ–Ω–∞ —É —Ç–µ–±—è –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è
export async function sendAdminReport(bot, taskId, task) {
    try {
        const { total, sent } = await getBroadcastProgress(taskId, task.target_audience);
        const audienceName = (task.target_audience || 'unknown').replace(/_/g, ' ');
        const reportMessage = `üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ #${taskId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>${sent}</b> –∏–∑ <b>${total}</b>\nüë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: <b>${audienceName}</b>`;
        await bot.telegram.sendMessage(ADMIN_ID, reportMessage, { parse_mode: 'HTML' });
    } catch (e) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É:', e.message);
    }
}