// services/broadcastManager.js
import { ADMIN_ID } from '../config.js';
import { logBroadcastSent, updateUserField, getBroadcastProgress } from '../db.js';

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –û–î–ù–û–ô –ø–∞—á–∫–∏
// services/broadcastManager.js
export async function runBroadcastBatch(bot, task, users) {
    const sendPromises = users.map(async (user) => {
        try {
            const personalMessage = (task.message || '').replace(/{first_name}/g, user.first_name || '–¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥');
            const options = { parse_mode: 'HTML', disable_web_page_preview: task.disable_web_page_preview, disable_notification: task.disable_notification };
            if (task.keyboard?.length > 0) options.reply_markup = { inline_keyboard: task.keyboard };
            
            const fileId = task.file_id;
            if (fileId) {
                if (personalMessage) options.caption = personalMessage;
                const mimeType = task.file_mime_type || '';
                if (mimeType.startsWith('image/')) await bot.telegram.sendPhoto(user.id, fileId, options);
                else if (mimeType.startsWith('video/')) await bot.telegram.sendVideo(user.id, fileId, options);
                else if (mimeType.startsWith('audio/')) await bot.telegram.sendAudio(user.id, fileId, options);
                else await bot.telegram.sendDocument(user.id, fileId, options);
            } else if (personalMessage) {
                await bot.telegram.sendMessage(user.id, personalMessage, options);
            }
            
            // =====> –í–û–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï <=====
            // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥, –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞—Å—Ç–æ—è—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º (ID).
            if (task.id) {
                await logBroadcastSent(task.id, user.id);
            }
            // =============================
            
            return { status: 'ok', userId: user.id };
        } catch (e) {
            if (e.response?.error_code === 403) {
                await updateUserField(user.id, 'active', false);
            }
            return { status: 'error', userId: user.id, reason: e.message };
        }
    });
    
    await Promise.allSettled(sendPromises);
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
export async function sendAdminReport(bot, taskId, task) {
    try {
        const { total, sent } = await getBroadcastProgress(taskId, task.target_audience);
        const audienceName = (task.target_audience || 'unknown').replace(/_/g, ' ');
        const reportMessage = `üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ #${taskId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>${sent}</b> –∏–∑ <b>${total}</b>\nüë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: <b>${audienceName}</b>`;
        await bot.telegram.sendMessage(ADMIN_ID, reportMessage, { parse_mode: 'HTML' });
    } catch (e) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É:', e.message);
    }
}