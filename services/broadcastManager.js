// services/broadcastManager.js (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

import pMap from 'p-map';
import pTimeout from 'p-timeout';
import { ADMIN_ID } from '../config.js';
import { logBroadcastSent, updateUserField, getBroadcastProgress } from '../db.js';

// --- Helper Functions ---

function escapeHtml(text) {
  if (!text) return '';
  return String(text)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/"/g, '&quot;');
}

const MEDIA_TYPES = {
  'image/': 'sendPhoto',
  'video/': 'sendVideo',
  'audio/': 'sendAudio'
};

function getTelegramMethod(mimeType) {
  const prefix = Object.keys(MEDIA_TYPES).find(k => mimeType?.startsWith(k));
  return MEDIA_TYPES[prefix] || 'sendDocument';
}

// --- Core Functions ---

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å retry –Ω–∞ 429
 */
async function sendToUser(bot, task, user, retryCount = 0) {
  const MAX_RETRIES = 3;
  
  try {
    // –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞—â–∏—Ç–æ–π –æ—Ç XSS
    const personalMessage = (task.message || '')
      .replace(/{first_name}/g, escapeHtml(user.first_name || '–¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥'));
    
    const options = {
      parse_mode: 'HTML',
      disable_web_page_preview: task.disable_web_page_preview,
      disable_notification: task.disable_notification
    };
    
    if (task.keyboard?.length > 0) {
      options.reply_markup = { inline_keyboard: task.keyboard };
    }
    
    // –¢–∞–π–º–∞—É—Ç 15 —Å–µ–∫—É–Ω–¥ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É
    await pTimeout(
      (async () => {
        if (task.file_id) {
          if (personalMessage) options.caption = personalMessage;
          const method = getTelegramMethod(task.file_mime_type);
          await bot.telegram[method](user.id, task.file_id, options);
        } else if (personalMessage) {
          await bot.telegram.sendMessage(user.id, personalMessage, options);
        }
      })(),
      {
        milliseconds: 15000,
        message: `–ü—Ä–µ–≤—ã—à–µ–Ω —Ç–∞–π–º–∞—É—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.id}`
      }
    );
    
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞
    try {
      if (task.id) await logBroadcastSent(task.id, user.id);
    } catch (logErr) {
      console.error(`[Broadcast] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–≥ –¥–ª—è ${user.id}:`, logErr.message);
    }
    
    return { status: 'ok', userId: user.id };
    
  } catch (e) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ rate limit (429)
    if (e.response?.error_code === 429 && retryCount < MAX_RETRIES) {
      const retryAfter = e.response.parameters?.retry_after || 5;
      console.warn(`[Broadcast] Rate limit –¥–ª—è ${user.id}, –æ–∂–∏–¥–∞–Ω–∏–µ ${retryAfter}—Å (–ø–æ–ø—ã—Ç–∫–∞ ${retryCount + 1}/${MAX_RETRIES})`);
      
      await new Promise(r => setTimeout(r, retryAfter * 1000));
      return sendToUser(bot, task, user, retryCount + 1);
    }
    
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏–ª–∏ —É–¥–∞–ª–∏–ª —á–∞—Ç
    if (e.response?.error_code === 403 || e.response?.description?.includes('chat not found')) {
      try {
        await updateUserField(user.id, { can_receive_broadcasts: false });
      } catch (updateErr) {
        console.error(`[Broadcast] –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ñ–ª–∞–≥ –¥–ª—è ${user.id}:`, updateErr.message);
      }
    }
    
    // –í—Å–µ–≥–¥–∞ –ª–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞—Å—Ç—å –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    try {
      if (task.id) await logBroadcastSent(task.id, user.id);
    } catch (logErr) {
      console.error(`[Broadcast] –û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è ${user.id}:`, logErr.message);
    }
    
    return { 
      status: 'error', 
      userId: user.id, 
      reason: e.message,
      code: e.response?.error_code 
    };
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–Ω—É –ø–∞—á–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
 */
export async function runBroadcastBatch(bot, task, users) {
  let sentCount = 0;
  const totalUsers = users.length;
  
  const results = await pMap(
    users,
    async (user) => {
      const result = await sendToUser(bot, task, user);
      sentCount++;
      
      // –ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á—ë—Ç –∫–∞–∂–¥—ã–µ 100 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      if (task.id && sentCount % 100 === 0) {
        const progress = ((sentCount / totalUsers) * 100).toFixed(1);
        try {
          await bot.telegram.sendMessage(
            ADMIN_ID,
            `‚è≥ –†–∞—Å—Å—ã–ª–∫–∞ #${task.id}: ${sentCount}/${totalUsers} (${progress}%)`,
            { disable_notification: true }
          );
        } catch (reportErr) {
          console.error('[Broadcast] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–π –æ—Ç—á—ë—Ç:', reportErr.message);
        }
      }
      
      return result;
    },
    { 
      concurrency: 30 // Telegram API limit ~30 req/sec
    }
  );
  
  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
  const stats = {
    total: results.length,
    success: results.filter(r => r.status === 'ok').length,
    errors: results.filter(r => r.status === 'error').length
  };
  
  console.log(`[Broadcast] –ü–∞—á–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:`, stats);
  return results;
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
 */
export async function sendAdminReport(bot, taskId, task) {
  try {
    const { total, sent } = await getBroadcastProgress(taskId, task.target_audience);
    const audienceName = (task.target_audience || 'unknown').replace(/_/g, ' ');
    
    const reportMessage = 
      `üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ #${taskId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n` +
      `‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>${sent}</b> –∏–∑ <b>${total}</b>\n` +
      `üë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: <b>${audienceName}</b>\n` +
      `üìä –£—Å–ø–µ—à–Ω–æ—Å—Ç—å: <b>${((sent / total) * 100).toFixed(1)}%</b>`;
    
    await bot.telegram.sendMessage(ADMIN_ID, reportMessage, { parse_mode: 'HTML' });
  } catch (e) {
    console.error('[Broadcast] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É:', e.message);
  }
}