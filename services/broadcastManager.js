// services/broadcastManager.js
import { ADMIN_ID } from '../config.js';
// –í–∞–∂–Ω–æ: –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ db.js, –∫–æ—Ç–æ—Ä—ã–µ –º—ã —Å–æ–∑–¥–∞–¥–∏–º –ø–æ–∑–∂–µ
import { logBroadcastSent, updateUserField, getUsersForBroadcastBatch, getBroadcastProgress } from '../db.js';

// –ù–û–í–ê–Ø –í–ï–†–°–ò–Ø –§–£–ù–ö–¶–ò–ò! –¢–ï–ü–ï–†–¨ –û–ù–ê –û–ë–†–ê–ë–ê–¢–´–í–ê–ï–¢ –û–î–ù–£ –ü–ê–ß–ö–£.
export async function runBroadcastBatch(bot, task, users) {
    console.log(`[Broadcast] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –ø–∞—á–∫—É –∏–∑ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ #${task.id}.`);

    const sendPromises = users.map(async (user) => {
        try {
            const personalMessage = (task.message || '').replace(/{first_name}/g, user.first_name || '–¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥');
            const options = { parse_mode: 'HTML', disable_web_page_preview: task.disable_web_page_preview, disable_notification: task.disable_notification };
            if (task.keyboard?.length > 0) options.reply_markup = { inline_keyboard: task.keyboard };
            
            const fileId = task.file_id;
            if (fileId) {
                if (personalMessage) options.caption = personalMessage;
                const mimeType = task.file_mime_type || '';
                if (mimeType.startsWith('image/')) await bot.telegram.sendPhoto(user.id, fileId, options);
                else if (mimeType.startsWith('video/')) await bot.telegram.sendVideo(user.id, fileId, options);
                else if (mimeType.startsWith('audio/')) await bot.telegram.sendAudio(user.id, fileId, options);
                else await bot.telegram.sendDocument(user.id, fileId, options);
            } else if (personalMessage) {
                await bot.telegram.sendMessage(user.id, personalMessage, options);
            }

            await logBroadcastSent(task.id, user.id);
            return { status: 'ok', userId: user.id };
        } catch (e) {
            if (e.response?.error_code === 403) {
                await updateUserField(user.id, 'active', false);
            }
            // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ broadcast_log, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å—Ç–æ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω
            return { status: 'error', userId: user.id, reason: e.message };
        }
    });

    // Promise.allSettled –∂–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –ø—Ä–æ–º–∏—Å–æ–≤, –¥–∞–∂–µ –µ—Å–ª–∏ —á–∞—Å—Ç—å –∏–∑ –Ω–∏—Ö —Å –æ—à–∏–±–∫–∞–º–∏
    const results = await Promise.allSettled(sendPromises);

    const successCount = results.filter(r => r.status === 'fulfilled' && r.value.status === 'ok').length;
    const errorCount = results.length - successCount;

    console.log(`[Broadcast] –ü–∞—á–∫–∞ –¥–ª—è #${task.id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: ${successCount}, –û—à–∏–±–∫–∏: ${errorCount}`);
    
    return { successCount, errorCount };
}

// –§—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–∞ –∞–¥–º–∏–Ω—É –≤—ã–Ω–µ—Å–µ–º –≤ –≤–æ—Ä–∫–µ—Ä
export async function sendAdminReport(bot, taskId, task) {
    try {
        const { total, sent } = await getBroadcastProgress(taskId);
        const audienceName = (task.target_audience || 'unknown').replace('_', ' ');
        const reportMessage = `üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ #${taskId} –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: <b>${sent}</b> –∏–∑ <b>${total}</b>\nüë• –ê—É–¥–∏—Ç–æ—Ä–∏—è: <b>${audienceName}</b>`;
        await bot.telegram.sendMessage(ADMIN_ID, reportMessage, { parse_mode: 'HTML' });
    } catch (e) {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –∞–¥–º–∏–Ω—É:', e.message);
    }
}