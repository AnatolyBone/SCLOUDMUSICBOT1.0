// services/notifier.js

import { findUsersExpiringIn, markStageNotified, updateUserField } from '../db.js';
import { T } from '../config/texts.js';

let lastNotificationDate = null;

function pluralDays(n) {
  const a = Math.abs(n) % 100;
  const b = a % 10;
  if (a > 10 && a < 20) return '–¥–Ω–µ–π';
  if (b > 1 && b < 5) return '–¥–Ω—è';
  if (b === 1) return '–¥–µ–Ω—å';
  return '–¥–Ω–µ–π';
}

/**
 * –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–æ–º —Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É (workerManager).
 */
export async function checkAndSendExpirationNotifications(bot) {
  const now = new Date();
  const currentDate = now.toISOString().slice(0, 10);

  // –£–∂–µ –¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è ‚Äî –≤—ã—Ö–æ–¥–∏–º
  if (currentDate === lastNotificationDate) return;

  // –®–ª—ë–º –û–î–ò–ù –†–ê–ó –ø–æ—Å–ª–µ 10:00 UTC (—á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–º–∞—Ö–Ω—É—Ç—å—Å—è –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–∞—Ö)
  if (now.getUTCHours() < 10) return;

  console.log(`[Notifier] –°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞ ${currentDate} (UTC>=10:00).`);

  const stages = [
    { days: 3, flag: 'notified_exp_3d', key: 'exp_3d' },
    { days: 1, flag: 'notified_exp_1d', key: 'exp_1d' },
    { days: 0, flag: 'notified_exp_0d', key: 'exp_0d' }
  ];

  try {
    for (const s of stages) {
      const users = await findUsersExpiringIn(s.days, s.flag);
      if (!users?.length) continue;

      console.log(`[Notifier] –≠—Ç–∞–ø ${s.days}–¥: ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`);

      for (const u of users) {
        const name = u.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
        const daysWord = pluralDays(s.days);

        // –®–∞–±–ª–æ–Ω –∏–∑ —Ç–µ–∫—Å—Ç–æ–≤ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç
        let tpl = T(s.key) || (
          s.days === 3
            ? `üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days} {days_word}.\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ—ë, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º!\n\n–ù–∞–∂–º–∏—Ç–µ /premium, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–∞—Ä–∏—Ñ—ã.`
            : s.days === 1
              ? `üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞.\n–ü—Ä–æ–¥–ª–∏—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–æ—Å—Ç—É–ø. –ù–∞–∂–º–∏—Ç–µ /premium.`
              : `‚ö†Ô∏è –ü—Ä–∏–≤–µ—Ç, {name}!\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è.\n–ü—Ä–æ–¥–ª–∏—Ç–µ —Å–µ–π—á–∞—Å: /premium`
        );

        const msg = tpl
          .replace('{name}', name)
          .replace('{days}', String(s.days))
          .replace('{days_word}', daysWord);

        try {
          await bot.telegram.sendMessage(u.id, msg);
          await markStageNotified(u.id, s.flag);
        } catch (e) {
          if (e?.response?.error_code === 403) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
            await updateUserField(u.id, 'active', false).catch(() => {});
            await markStageNotified(u.id, s.flag).catch(() => {});
          } else {
            console.error(`[Notifier] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${u.id}:`, e?.message || e);
          }
        }

        // ~3.3 —Å–æ–æ–±—â–µ–Ω–∏—è/—Å–µ–∫ (—á—Ç–æ–±—ã –Ω–µ —É–ø–µ—Ä–µ—Ç—å—Å—è –≤ –ª–∏–º–∏—Ç—ã Telegram)
        await new Promise(r => setTimeout(r, 300));
      }
    }
  } catch (e) {
    console.error('[Notifier] Fatal:', e);
  } finally {
    // –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–¥–∞–∂–µ –µ—Å–ª–∏ 0 –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π)
    lastNotificationDate = currentDate;
    console.log('[Notifier] –ó–∞–≤–µ—Ä—à–µ–Ω–æ.');
  }
}