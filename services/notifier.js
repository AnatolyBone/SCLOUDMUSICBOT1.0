// services/notifier.js (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

import pMap from 'p-map';
import { Mutex } from 'async-mutex';
import {
  findUsersExpiringIn,
  markStageNotified,
  updateUserField,
  logUserAction
} from '../db.js';
import { T } from '../config/texts.js';
import { ADMIN_ID } from '../config.js';
import redisService from './redisClient.js';

// ========================= CONFIGURATION =========================

const NOTIFICATION_THROTTLE_MS = parseInt(process.env.NOTIFICATION_THROTTLE_MS, 10) || 300;
const NOTIFICATION_CONCURRENCY = parseInt(process.env.NOTIFICATION_CONCURRENCY, 10) || 3;
const NOTIFICATION_START_HOUR_UTC = 10; // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ—Å–ª–µ 10:00 UTC

const notificationMutex = new Mutex();

// ========================= HELPER FUNCTIONS =========================

/**
 * –°–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–¥–µ–Ω—å/–¥–Ω—è/–¥–Ω–µ–π"
 */
function pluralDays(n) {
  const a = Math.abs(n) % 100;
  const b = a % 10;
  if (a > 10 && a < 20) return '–¥–Ω–µ–π';
  if (b > 1 && b < 5) return '–¥–Ω—è';
  if (b === 1) return '–¥–µ–Ω—å';
  return '–¥–Ω–µ–π';
}

/**
 * –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML (–∑–∞—â–∏—Ç–∞ –æ—Ç XSS)
 */
function escapeHtml(text) {
  if (!text) return '';
  return String(text)
    .replace(/&/g, '&amp;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–∑ Redis
 */
async function getLastNotificationDate() {
  try {
    return await redisService.get('notifier:last_run');
  } catch (e) {
    console.warn('[Notifier] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å last_run –∏–∑ Redis:', e.message);
    return null;
  }
}

/**
 * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞ –≤ Redis
 */
async function setLastNotificationDate(date) {
  try {
    await redisService.setEx('notifier:last_run', 86400, date); // TTL 24 —á–∞—Å–∞
  } catch (e) {
    console.warn('[Notifier] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å last_run –≤ Redis:', e.message);
  }
}

/**
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function buildMessage(stage, userName) {
  const name = escapeHtml(userName);
  const daysWord = pluralDays(stage.days);
  
  // –ë–µ—Ä—ë–º —Ç–µ–∫—Å—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π
  let tpl = T(stage.key);
  
  if (!tpl) {
    if (stage.days === 3) {
      tpl = `üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ {days} {days_word}.\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å: /premium`;
    } else if (stage.days === 1) {
      tpl = `üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç –∑–∞–≤—Ç—Ä–∞.\n–ü—Ä–æ–¥–ª–∏—Ç–µ –∑–∞—Ä–∞–Ω–µ–µ: /premium`;
    } else {
      tpl = `‚ö†Ô∏è –ü—Ä–∏–≤–µ—Ç, {name}!\n–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è.\n–ü—Ä–æ–¥–ª–∏—Ç–µ —Å–µ–π—á–∞—Å: /premium`;
    }
  }
  
  return tpl
    .replace('{name}', name)
    .replace('{days}', String(stage.days))
    .replace('{days_word}', daysWord);
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
async function handleNotificationError(error, userId, flag) {
  if (error?.response?.error_code === 403) {
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞
    console.log(`[Notifier] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞, –¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É—é.`);
    await Promise.all([
      updateUserField(userId, 'active', false).catch(() => {}),
      markStageNotified(userId, flag).catch(() => {})
    ]);
    return 'blocked';
  } else {
    console.error(`[Notifier] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ ${userId}:`, error?.message || error);
    return 'error';
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
async function sendNotificationToUser(bot, user, stage) {
  const msg = buildMessage(stage, user.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
  
  try {
    await bot.telegram.sendMessage(user.id, msg);
    
    await Promise.all([
      markStageNotified(user.id, stage.flag),
      logUserAction(user.id, 'premium_expiring_notified', {
        stage: stage.flag,
        premium_until: user.premium_until
      })
    ]);
    
    return 'success';
  } catch (e) {
    return await handleNotificationError(e, user.id, stage.flag);
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É
 */
async function sendAdminReport(bot, stats) {
  if (!ADMIN_ID) return;
  
  const report = 
    `üìä <b>–û—Ç—á—ë—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n` +
    `‚úÖ –£—Å–ø–µ—à–Ω–æ: <b>${stats.success}</b>\n` +
    `‚ùå –û—à–∏–±–æ–∫: <b>${stats.errors}</b>\n` +
    `üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏ –±–æ—Ç–∞: <b>${stats.blocked}</b>\n` +
    `üë• –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: <b>${stats.total}</b>\n` +
    `‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>${stats.duration}—Å</b>`;
  
  try {
    await bot.telegram.sendMessage(ADMIN_ID, report, { parse_mode: 'HTML' });
  } catch (e) {
    console.error('[Notifier] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É:', e.message);
  }
}

// ========================= MAIN FUNCTIONS =========================

/**
 * –î–Ω–µ–≤–Ω–æ–π –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: 3–¥ / 1–¥ / 0–¥
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —á–∞—Å—Ç–æ (—Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É), –Ω–æ —Ä–µ–∞–ª—å–Ω–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å –ø–æ—Å–ª–µ 10:00 UTC.
 */
export async function checkAndSendExpirationNotifications(bot) {
  // –ó–∞—â–∏—Ç–∞ –æ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
  const release = await notificationMutex.acquire();
  
  try {
    const now = new Date();
    const currentDate = now.toISOString().slice(0, 10);
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–∂–µ –¥–µ–ª–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è?
    const lastRun = await getLastNotificationDate();
    if (currentDate === lastRun) {
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞: –≤—Ä–µ–º—è >= 10:00 UTC?
    if (now.getUTCHours() < NOTIFICATION_START_HOUR_UTC) {
      return;
    }
    
    console.log(`[Notifier] –°—Ç–∞—Ä—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∑–∞ ${currentDate} (UTC>=${NOTIFICATION_START_HOUR_UTC}:00).`);
    const startTime = Date.now();
    
    const stages = [
      { days: 3, flag: 'notified_exp_3d', key: 'exp_3d' },
      { days: 1, flag: 'notified_exp_1d', key: 'exp_1d' },
      { days: 0, flag: 'notified_exp_0d', key: 'exp_0d' }
    ];
    
    const globalStats = { success: 0, errors: 0, blocked: 0, total: 0 };
    
    for (const stage of stages) {
      const users = await findUsersExpiringIn(stage.days, stage.flag);
      
      if (!users?.length) {
        console.log(`[Notifier] –≠—Ç–∞–ø ${stage.days}–¥: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.`);
        continue;
      }
      
      console.log(`[Notifier] –≠—Ç–∞–ø ${stage.days}–¥: ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.`);
      globalStats.total += users.length;
      
      const results = await pMap(
        users,
        async (user) => sendNotificationToUser(bot, user, stage),
        { concurrency: NOTIFICATION_CONCURRENCY }
      );
      
      // –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
      results.forEach(result => {
        if (result === 'success') globalStats.success++;
        // services/notifier.js (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è) - –ß–ê–°–¢–¨ 2 (–§–ò–ù–ê–õ)

else if (result === 'blocked') globalStats.blocked++;
else globalStats.errors++;
});
}

// –í—ã—á–∏—Å–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
const duration = ((Date.now() - startTime) / 1000).toFixed(1);
globalStats.duration = duration;

console.log(`[Notifier] –ó–∞–≤–µ—Ä—à–µ–Ω–æ. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`, globalStats);

// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É
if (globalStats.total > 0) {
  await sendAdminReport(bot, globalStats);
}

// –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
await setLastNotificationDate(currentDate);

}
catch (e) {
  console.error('[Notifier] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', e);
} finally {
  release();
}
}

/**
 * –ü–æ—á–∞—Å–æ–≤–æ–π –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä: —Å—Ç—Ä–∞—Ö—É–µ—Ç —Ç–æ–ª—å–∫–æ "—Å–µ–≥–æ–¥–Ω—è" (0–¥)
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ—Ç –∂–µ —Ñ–ª–∞–≥ notified_exp_0d ‚Äî –¥—É–±–ª–µ–π —Å –¥–Ω–µ–≤–Ω—ã–º –Ω–µ –±—É–¥–µ—Ç.
 * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑ –≤ —á–∞—Å.
 */
export async function notifyExpiringTodayHourly(bot) {
  try {
    // –ë–µ—Ä—ë–º —Ç–µ—Ö, —É –∫–æ–≥–æ –∏—Å—Ç–µ—á–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è (–æ–∫–Ω–æ —Å—É—Ç–æ–∫ –ø–æ UTC), –∏ –∫—Ç–æ –µ—â—ë –Ω–µ —É–≤–µ–¥–æ–º–ª—ë–Ω
    const users = await findUsersExpiringIn(0, 'notified_exp_0d');
    
    if (!users?.length) {
      console.log('[Notifier/Hourly-0d] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.');
      return;
    }
    
    console.log(`[Notifier/Hourly-0d] –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤: ${users.length}`);
    
    const stats = { success: 0, errors: 0, blocked: 0 };
    
    const results = await pMap(
      users,
      async (user) => {
        const untilText = new Date(user.premium_until).toLocaleString('ru-RU', {
          day: '2-digit',
          month: '2-digit',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit'
        });
        
        const msg =
          `‚è≥ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —Å–µ–≥–æ–¥–Ω—è.\n\n` +
          `–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: ${untilText}.\n` +
          `–ß—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π –ª–∏–º–∏—Ç, –ø—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É: /premium`;
        
        try {
          await bot.telegram.sendMessage(user.id, msg);
          
          await Promise.all([
            markStageNotified(user.id, 'notified_exp_0d'),
            logUserAction(user.id, 'premium_expiring_notified', {
              stage: 'notified_exp_0d',
              premium_until: user.premium_until
            })
          ]);
          
          return 'success';
        } catch (e) {
          // –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
          await markStageNotified(user.id, 'notified_exp_0d').catch(() => {});
          
          if (e?.response?.error_code === 403) {
            await updateUserField(user.id, 'active', false).catch(() => {});
            return 'blocked';
          }
          
          console.warn('[Notifier/Hourly-0d] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏', user.id, e.message);
          return 'error';
        }
      }, { concurrency: NOTIFICATION_CONCURRENCY }
    );
    
    // –ü–æ–¥—Å—á—ë—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    results.forEach(result => {
      if (result === 'success') stats.success++;
      else if (result === 'blocked') stats.blocked++;
      else stats.errors++;
    });
    
    console.log(`[Notifier/Hourly-0d] –ó–∞–≤–µ—Ä—à–µ–Ω–æ.`, stats);
    
  } catch (e) {
    console.error('[Notifier/Hourly-0d] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', e.message);
  }
}

// ========================= GRACEFUL SHUTDOWN =========================

/**
 * –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –º—å—é—Ç–µ–∫—Å–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
 */
process.on('SIGTERM', () => {
  if (notificationMutex.isLocked()) {
    console.log('[Notifier] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, –æ—Å–≤–æ–±–æ–∂–¥–∞—é mutex...');
  }
});

process.on('SIGINT', () => {
  if (notificationMutex.isLocked()) {
    console.log('[Notifier] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã (SIGINT), –æ—Å–≤–æ–±–æ–∂–¥–∞—é mutex...');
  }
});

// ========================= EXPORTS SUMMARY =========================
// –û—Å–Ω–æ–≤–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã:
// - checkAndSendExpirationNotifications: –¥–Ω–µ–≤–Ω–æ–π –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (3–¥/1–¥/0–¥)
// - notifyExpiringTodayHourly: –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–∞—Ö–æ–≤—â–∏–∫ –¥–ª—è 0–¥

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è):
// - pluralDays: —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–¥–µ–Ω—å"
// - escapeHtml: –∑–∞—â–∏—Ç–∞ –æ—Ç XSS
// - buildMessage: —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
// - handleNotificationError: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏
// - sendNotificationToUser: –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
// - sendAdminReport: –æ—Ç—á—ë—Ç –∞–¥–º–∏–Ω—É
// - getLastNotificationDate/setLastNotificationDate: —Ä–∞–±–æ—Ç–∞ —Å Redis

// ========================= CONFIGURATION TIPS =========================
// 
// –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ):
// - NOTIFICATION_THROTTLE_MS=300 (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ pMap, –æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
// - NOTIFICATION_CONCURRENCY=3 (—Å–∫–æ–ª—å–∫–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
// 
// –î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ Render.com —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:
// NOTIFICATION_CONCURRENCY=3 (–±–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è Telegram API)
// 
// ========================= USAGE IN index.js =========================
// 
// import { checkAndSendExpirationNotifications, notifyExpiringTodayHourly } from './services/notifier.js';
// 
// // –î–Ω–µ–≤–Ω–æ–π –Ω–æ—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä (—Ä–∞–∑ –≤ –º–∏–Ω—É—Ç—É, –Ω–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç 1 —Ä–∞–∑ –≤ –¥–µ–Ω—å)
// setInterval(() => checkAndSendExpirationNotifications(bot), 60000);
// 
// // –ü–æ—á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–∞—Ö–æ–≤—â–∏–∫ –¥–ª—è "—Å–µ–≥–æ–¥–Ω—è"
// setInterval(() => notifyExpiringTodayHourly(bot), 3600000);
// 
// ========================= END OF FILE =========================