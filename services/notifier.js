// services/notifier.js

import { findUsersToNotify, markAsNotified, updateUserField } from '../db.js';

let lastNotificationDate = null; 

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ—Ä–∞ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –∏ –¥–µ–ª–∞–µ—Ç —ç—Ç–æ.
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ cron-–∑–∞–¥–∞—á–∏ –≤ workerManager.
 * @param {Telegraf} bot - –≠–∫–∑–µ–º–ø–ª—è—Ä Telegraf –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.
 */
export async function checkAndSendExpirationNotifications(bot) {
    const now = new Date();
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –≤ 10 —É—Ç—Ä–∞ –ø–æ UTC
    if (now.getUTCHours() !== 10) {
        return;
    }

    const currentDate = now.toISOString().slice(0, 10);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ –º—ã —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
    if (currentDate === lastNotificationDate) {
        return;
    }

    console.log(`[Notifier] –ù–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (${currentDate}).`);
    lastNotificationDate = currentDate;

    try {
        const users = await findUsersToNotify(3); // –ò—â–µ–º —Ç–µ—Ö, —É –∫–æ–≥–æ —Ç–∞—Ä–∏—Ñ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 3 –¥–Ω—è
        if (users.length === 0) {
            console.log('[Notifier] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ—Ç.');
            return;
        }

        console.log(`[Notifier] –ù–∞–π–¥–µ–Ω–æ ${users.length} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...`);
        for (const user of users) {
            const daysLeft = Math.ceil((new Date(user.premium_until) - new Date()) / (1000 * 60 * 60 * 24));
            if (daysLeft <= 0) continue; // –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

            const daysWord = daysLeft === 1 ? '–¥–µ–Ω—å' : '–¥–Ω—è'; // –£–ø—Ä–æ—â–µ–Ω–æ –¥–ª—è 1 –∏ 3 –¥–Ω–µ–π

            const message = `üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name}!\n\n` +
                            `–ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ ${daysLeft} ${daysWord}. ` +
                            `–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –µ–µ, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º!\n\n` +
                            `–ù–∞–∂–º–∏—Ç–µ /premium, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã.`;

            try {
                await bot.telegram.sendMessage(user.id, message);
                await markAsNotified(user.id);
            } catch (e) {
                if (e.response?.error_code === 403) {
                    await updateUserField(user.id, 'active', false);
                } else {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${user.id}:`, e.message);
                }
            }
            await new Promise(resolve => setTimeout(resolve, 300)); // –ó–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
        }
        console.log('[Notifier] –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    } catch (e) {
        console.error('üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', e);
    }
}