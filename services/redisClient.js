// services/redisClient.js

import { createClient } from 'redis';

class RedisService {
  constructor() {
    this.client = null;
    this.connectionPromise = null; // –î–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç "–≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π"
    console.log('[Redis] –°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω.');
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis, –µ—Å–ª–∏ –µ–≥–æ –µ—â–µ –Ω–µ—Ç.
   * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞ —Ä–∞–∑.
   */
  connect() {
    // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã, –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    if (this.client && this.client.isOpen) {
      return Promise.resolve(this.client);
    }
    // –ï—Å–ª–∏ —É–∂–µ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ "–æ–±–µ—â–∞–Ω–∏–µ"
    if (this.connectionPromise) {
      return this.connectionPromise;
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    this.connectionPromise = new Promise(async (resolve, reject) => {
      const redisUrl = process.env.REDIS_URL;
      if (!redisUrl) {
        console.warn('[Redis] –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è REDIS_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. Redis –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.');
        this.connectionPromise = null;
        return resolve(null);
      }

      console.log(`[Redis] –ü–æ–¥–∫–ª—é—á–∞—é—Å—å...`);
      const client = createClient({ 
        url: redisUrl,
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        socket: {
          reconnectStrategy: (retries) => {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è, —É–≤–µ–ª–∏—á–∏–≤–∞—è –∑–∞–¥–µ—Ä–∂–∫—É, –Ω–æ –Ω–µ –±–æ–ª–µ–µ 3 —Å–µ–∫—É–Ω–¥
            if (retries > 10) {
              console.error('[Redis] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫.');
              return new Error('Too many retries.');
            }
            return Math.min(retries * 100, 3000);
          }
        }
      });

      client.on('error', (err) => console.error('üî¥ –û—à–∏–±–∫–∞ Redis:', err.message));
      
      try {
        await client.connect();
        console.log('‚úÖ [Redis] –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω.');
        this.client = client;
        this.connectionPromise = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º "–æ–±–µ—â–∞–Ω–∏–µ" –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞
        resolve(this.client);
      } catch (err) {
        console.error('üî¥ [Redis] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', err.message);
        this.connectionPromise = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        reject(err);
      }
    });
    return this.connectionPromise;
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É.
   * @param {string} key
   * @returns {Promise<string|null>}
   */
  async get(key) {
    try {
      const client = await this.connect();
      if (!client) return null;
      return await client.get(key);
    } catch (e) {
      console.error(`[Redis GET] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–∞ ${key}:`, e.message);
      return null;
    }
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –∂–∏–∑–Ω–∏ (TTL).
   * @param {string} key
   * @param {string} value
   * @param {number} ttlSeconds - –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
   */
  async set(key, value, ttlSeconds) {
    try {
      const client = await this.connect();
      if (!client) return;
      await client.set(key, value, { EX: ttlSeconds });
    } catch (e) {
      console.error(`[Redis SET] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–ª—é—á–∞ ${key}:`, e.message);
    }
  }

  async disconnect() {
    if (this.client && this.client.isOpen) {
      console.log('[Redis] –ó–∞–∫—Ä—ã–≤–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
      await this.client.quit();
      this.client = null;
    }
  }
}

const redisService = new RedisService();
export default redisService;