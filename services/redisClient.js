// services/redisClient.js (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

import { createClient } from 'redis';

class RedisService {
  constructor() {
    this.client = null;
    this.connectionPromise = null;
    this.reconnectAttempts = 0;
    console.log('[Redis] –°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω.');
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Redis
   * –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –ø–æ–ø—ã—Ç–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∑–∞ —Ä–∞–∑
   */
  async connect() {
    // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    if (this.client?.isReady) {
      return this.client;
    }

    // –ï—Å–ª–∏ –∏–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if (this.connectionPromise) {
      return this.connectionPromise;
    }

    this.connectionPromise = (async () => {
      const redisUrl = process.env.REDIS_URL;
      
      if (!redisUrl) {
        console.warn('[Redis] –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è REDIS_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. Redis –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.');
        this.connectionPromise = null;
        return null;
      }

      console.log('[Redis] –ü–æ–¥–∫–ª—é—á–∞—é—Å—å...');
      
      const client = createClient({
        url: redisUrl,
        socket: {
          reconnectStrategy: (retries) => {
            this.reconnectAttempts = retries;
            
            // –ü–æ—Å–ª–µ 10 –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º
            if (retries > 10) {
              console.error('[Redis] –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (10).');
              this.client = null;
              return false; // –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –∞–≤—Ç–æ—Ä–µ–∫–æ–Ω–Ω–µ–∫—Ç
            }
            
            const delay = Math.min(retries * 100, 3000);
            console.log(`[Redis] –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${retries}/10 —á–µ—Ä–µ–∑ ${delay}–º—Å...`);
            return delay;
          }
        }
      });

      client.on('error', (err) => {
        console.error('üî¥ [Redis] –û—à–∏–±–∫–∞:', err.message);
      });

      client.on('reconnecting', () => {
        console.log('[Redis] –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
      });

      client.on('ready', () => {
        console.log('‚úÖ [Redis] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.');
        this.reconnectAttempts = 0;
      });

      try {
        await client.connect();
        console.log('‚úÖ [Redis] –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω.');
        this.client = client;
        this.connectionPromise = null;
        return client;
      } catch (err) {
        console.error('üî¥ [Redis] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', err.message);
        this.connectionPromise = null;
        throw err;
      }
    })();

    return this.connectionPromise;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
   */
  async ensureConnection() {
    if (this.client?.isReady) return this.client;
    return await this.connect();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É
   */
  async get(key) {
    if (!key || typeof key !== 'string') {
      console.error('[Redis GET] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á:', key);
      return null;
    }

    try {
      const client = await this.ensureConnection();
      if (!client) return null;
      return await client.get(key);
    } catch (e) {
      console.error(`[Redis GET] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–∞ ${key}:`, e.message);
      return null;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å TTL
   */
  async set(key, value, ttlSeconds) {
    if (!key || typeof key !== 'string') {
      console.error('[Redis SET] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á:', key);
      return;
    }

    if (value === undefined || value === null) {
      console.error('[Redis SET] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–ª—é—á–∞', key);
      return;
    }

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
    const valueToStore = typeof value === 'object' ? JSON.stringify(value) : String(value);

    try {
      const client = await this.ensureConnection();
      if (!client) return;
      await client.set(key, valueToStore, { EX: ttlSeconds });
    } catch (e) {
      console.error(`[Redis SET] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–ª—é—á–∞ ${key}:`, e.message);
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ —Å TTL (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å notifier.js)
   */
  async setEx(key, ttlSeconds, value) {
    return await this.set(key, value, ttlSeconds);
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –∫–ª—é—á
   */
  async del(key) {
    if (!key || typeof key !== 'string') {
      console.error('[Redis DEL] –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–ª—é—á:', key);
      return 0;
    }

    try {
      const client = await this.ensureConnection();
      if (!client) return 0;
      return await client.del(key);
    } catch (e) {
      console.error(`[Redis DEL] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª—é—á–∞ ${key}:`, e.message);
      return 0;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç JSON –æ–±—ä–µ–∫—Ç
   */
  async getJson(key) {
    const value = await this.get(key);
    if (!value) return null;
    
    try {
      return JSON.parse(value);
    } catch (e) {
      console.error(`[Redis] –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è –∫–ª—é—á–∞ ${key}:`, e.message);
      return null;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç JSON –æ–±—ä–µ–∫—Ç
   */
  async setJson(key, obj, ttlSeconds) {
    if (typeof obj !== 'object' || obj === null) {
      console.error('[Redis] setJson –æ–∂–∏–¥–∞–µ—Ç –æ–±—ä–µ–∫—Ç, –ø–æ–ª—É—á–µ–Ω–æ:', typeof obj);
      return;
    }

    const value = JSON.stringify(obj);
    await this.set(key, value, ttlSeconds);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis (–¥–ª—è healthcheck)
   */
  async isAvailable() {
    try {
      const client = await this.ensureConnection();
      if (!client) return false;
      await client.ping();
      return true;
    } catch (e) {
      return false;
    }
  }

  /**
   * –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ (–¥–ª—è —Å—á—ë—Ç—á–∏–∫–æ–≤)
   */
  async incr(key) {
    try {
      const client = await this.ensureConnection();
      if (!client) return null;
      return await client.incr(key);
    } catch (e) {
      console.error(`[Redis INCR] –û—à–∏–±–∫–∞ –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞ ${key}:`, e.message);
      return null;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç TTL –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞
   */
  async expire(key, ttlSeconds) {
    try {
      const client = await this.ensureConnection();
      if (!client) return false;
      return await client.expire(key, ttlSeconds);
    } catch (e) {
      console.error(`[Redis EXPIRE] –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ TTL –¥–ª—è ${key}:`, e.message);
      return false;
    }
  }

  /**
   * –ó–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
   */
  async disconnect() {
    if (this.client?.isOpen) {
      console.log('[Redis] –ó–∞–∫—Ä—ã–≤–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
      await this.client.quit();
      this.client = null;
    }
  }
}

// –°–æ–∑–¥–∞—ë–º singleton –∏–Ω—Å—Ç–∞–Ω—Å
const redisService = new RedisService();

// Graceful shutdown
process.on('SIGTERM', async () => {
  await redisService.disconnect();
});

process.on('SIGINT', async () => {
  await redisService.disconnect();
});

export default redisService;

// ========================= EXPORTS SUMMARY =========================
// –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç–æ–¥—ã:
// - get(key): –ø–æ–ª—É—á–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
// - set(key, value, ttl): —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Å TTL
// - setEx(key, ttl, value): –∞–ª–∏–∞—Å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
// - del(key): —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á
// - getJson(key): –ø–æ–ª—É—á–∏—Ç—å JSON –æ–±—ä–µ–∫—Ç
// - setJson(key, obj, ttl): —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å JSON –æ–±—ä–µ–∫—Ç
// - isAvailable(): –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ (–¥–ª—è healthcheck)
// - incr(key): –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç —Å—á—ë—Ç—á–∏–∫–∞
// - expire(key, ttl): —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å TTL –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–ª—é—á–∞