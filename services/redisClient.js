// services/redisClient.js

import { createClient } from 'redis';

class RedisService {
  constructor() {
    this.client = null;
    console.log('[Redis] –°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω.');
  }

  async connect() {
    if (this.client && this.client.isOpen) {
      return this.client;
    }

    const redisUrl = process.env.REDIS_URL;
    if (!redisUrl) {
      // –í production —ç—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–æ–π
      if (process.env.NODE_ENV === 'production') {
        throw new Error('–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è REDIS_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
      }
      console.warn('[Redis] –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è REDIS_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. Redis –Ω–µ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è.');
      return null;
    }

    console.log(`[Redis] –ü–æ–¥–∫–ª—é—á–∞—é—Å—å...`);

    this.client = createClient({ url: redisUrl });
    this.client.on('error', (err) => console.error('üî¥ –û—à–∏–±–∫–∞ Redis:', err));
    await this.client.connect();
    console.log('‚úÖ [Redis] –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω.');
    return this.client;
  }

  getClient() {
    if (!this.client || !this.client.isOpen) {
      console.warn('[Redis] –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ Redis, –Ω–æ –∫–ª–∏–µ–Ω—Ç –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω.');
      return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null –≤–º–µ—Å—Ç–æ –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø–∞–¥–∞–ª–æ
    }
    return this.client;
  }

  async disconnect() {
    if (this.client && this.client.isOpen) {
      console.log('[Redis] –ó–∞–∫—Ä—ã–≤–∞—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...');
      await this.client.quit();
      this.client = null;
      console.log('‚úÖ [Redis] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–æ.');
    }
  }
}

const redisService = new RedisService();

export default redisService;