// services/redisClient.js

import { createClient } from 'redis';

class RedisService {
  constructor() {
    this.client = null;
    console.log('[Redis] –°–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω.');
  }

  async connect() {
    if (this.client && this.client.isOpen) {
      return this.client;
    }

    const redisUrl = process.env.REDIS_URL;
    if (!redisUrl) {
      throw new Error('–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è REDIS_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!');
    }

    console.log(`[Redis] –ü–æ–¥–∫–ª—é—á–∞—é—Å—å...`);

    this.client = createClient({ url: redisUrl });
    this.client.on('error', (err) => console.error('üî¥ –û—à–∏–±–∫–∞ Redis:', err));
    await this.client.connect();
    console.log('‚úÖ [Redis] –ö–ª–∏–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω.');
    return this.client;
  }

  getClient() {
    if (!this.client || !this.client.isOpen) {
      throw new Error('Redis –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω. –í—ã–∑–æ–≤–∏—Ç–µ connect() —Å–Ω–∞—á–∞–ª–∞.');
    }
    return this.client;
  }
}

const redisService = new RedisService();

export default redisService;