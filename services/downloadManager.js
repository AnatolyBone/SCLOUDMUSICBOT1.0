// services/downloadManager.js (–§–ò–ù–ê–õ–¨–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø TaskQueue)

// === –ò–ú–ü–û–†–¢–´: –û–ë–ù–û–í–õ–ï–ù–ù–´–ï ===
import { spawn } from 'child_process';
import { PassThrough } from 'stream';
// -----------------------------

import fetch from 'node-fetch';
import pMap from 'p-map';
import { STORAGE_CHANNEL_ID, CHANNEL_USERNAME, PROXY_URL } from '../config.js';
import { Markup } from 'telegraf';
import path from 'path';
import ffmpegPath from 'ffmpeg-static'; // –ü—É—Ç—å –∫ FFMPEG
import fs from 'fs';
import os from 'os';
import { fileURLToPath } from 'url';
import crypto from 'crypto';

import { bot } from '../bot.js';
import { T } from '../config/texts.js';
import { TaskQueue } from '../lib/TaskQueue.js'; // <-- –£–ë–ï–î–ò–¢–ï–°–¨, –ß–¢–û –≠–¢–û–¢ –§–ê–ô–õ –°–£–©–ï–°–¢–í–£–ï–¢
import * as db from '../db.js';
import { getSetting } from './settingsManager.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(path.dirname(__filename));

// ========================= CONFIGURATION =========================

// –í–†–ï–ú–ï–ù–ù–´–ï –§–ê–ô–õ–´: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
const cacheDir = path.join(os.tmpdir(), 'cache');
if (!fs.existsSync(cacheDir)) fs.mkdirSync(cacheDir, { recursive: true });

const YTDL_TIMEOUT = 120;
const MAX_FILE_SIZE_BYTES = 49 * 1024 * 1024; // 49 –ú–ë (–ª–∏–º–∏—Ç Telegram)
const UNLIMITED_PLAYLIST_LIMIT = 100;
const FAKE_USER_AGENT = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è FFMPEG (–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω–æ –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞)
const FFMPEG_AVAILABLE = Boolean(ffmpegPath);
if (!FFMPEG_AVAILABLE) {
    console.error('[DownloadManager] ‚ùå FFMPEG –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ—Ç–æ–∫–æ–≤–∞—è –ø–µ—Ä–µ–¥–∞—á–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
}

const MAX_CONCURRENT_DOWNLOADS = parseInt(process.env.MAX_CONCURRENT_DOWNLOADS, 10) || 2;
const MAX_CONCURRENT_PLAYLIST_DOWNLOADS = 1;

// ========================= UTILS =========================

/**
 * –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
 */
function sanitizeFilename(title, artist = '') {
    let filename = artist ? `${artist} - ${title}` : title;
    // –£–¥–∞–ª—è–µ–º –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    filename = filename.replace(/[<>:"/\\|?*\x00-\x1F]/g, '');
    // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã
    return filename.trim().substring(0, 100);
}

/**
 * –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
 */
async function safeSendMessage(userId, text, extra = {}) {
    try {
        return await bot.telegram.sendMessage(userId, text, extra);
    } catch (e) {
        if (e.code === 403) {
            console.warn(`[DownloadManager] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ (403). –û—Ç–º–µ—á–∞—é –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ.`);
            db.updateUserField(userId, 'active', false).catch(err => console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è active —Å—Ç–∞—Ç—É—Å–∞:', err));
        } else {
            console.error(`[DownloadManager] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${userId}:`, e.message);
        }
        return null;
    }
}

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞ info.json
 */
function extractMetadataFromInfo(info) {
    return {
        title: info.title || info.track || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        uploader: info.uploader || info.artist || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
        duration: info.duration || 0,
        thumbnail: info.thumbnail,
        url: info.webpage_url,
        id: info.id
    };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ URL –±–µ–∑–æ–ø–∞—Å–µ–Ω (–Ω–µ—Ç SSRF)
 */
function isSafeUrl(url) {
    // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–µ–π –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç SSRF. 
    return url && !url.includes('127.0.0.1') && !url.includes('localhost') && !url.match(/10\.\d+\.\d+\.\d+/);
}


// ========================= CORE QUEUE PROCESSOR =========================

/**
 * –í–æ—Ä–∫–µ—Ä –æ—á–µ—Ä–µ–¥–∏, –≤—ã–ø–æ–ª–Ω—è—é—â–∏–π –∑–∞–≥—Ä—É–∑–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Ç—Ä–µ–∫–∞.
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ—Ç–æ–∫–æ–≤—É—é –ø–µ—Ä–µ–¥–∞—á—É –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏.
 *
 * –ü–†–ò–ú–ï–ß–ê–ù–ò–ï: –§—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –û–î–ò–ù –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏, –∫–∞–∫ —ç—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ –≤ TaskQueue.
 */
async function trackDownloadProcessor(taskData) { // <-- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –û–î–ò–ù –æ–±—ä–µ–∫—Ç
    // –î–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ downloadQueue.add()
    const { userId, url, originalUrl, metadata, priority, ctx } = taskData;

    // 1. –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–û–í
    // ... (–í–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –∑–¥–µ—Å—å, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞) ...

    // 2. –ü–û–ò–°–ö –í –ö–≠–®–ï (–°–ê–ú–´–ô –ë–´–°–¢–†–´–ô –ü–£–¢–¨)
    const cachedTrack = await db.findCachedTrack(url);
    if (cachedTrack) {
        const startCache = Date.now();
        const success = await safeSendMessage(userId, '', {
            audio: cachedTrack.file_id,
            caption: T('downloadedBy'),
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [[{ text: 'üéß –ù–∞–π—Ç–∏ –µ—â—ë', switch_inline_query_current_chat: '' }]]
            }
        });

        if (success) {
            db.incrementDownloads(userId, url, metadata.title).catch(() => {});
            console.log(`[DL CACHE] ${url} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∏–∑ –∫—ç—à–∞ –∑–∞ ${Date.now() - startCache}ms.`);
            return true;
        }
    }

    // 3. –ü–û–¢–û–ö–û–í–ê–Ø –ü–ï–†–ï–î–ê–ß–ê (STREAMING)
    const startStream = Date.now();
    const sanitizedFilename = sanitizeFilename(metadata.title, metadata.uploader);

    // --- –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –ê–†–ì–£–ú–ï–ù–¢–û–í –î–õ–Ø YT-DLP –° –ü–û–¢–û–ö–û–í–´–ú –í–´–í–û–î–û–ú ---
    // -f bestaudio - –≤—ã–±–∏—Ä–∞–µ—Ç –ª—É—á—à–∏–π –∞—É–¥–∏–æ–ø–æ—Ç–æ–∫
    // -o - - –≤—ã–≤–æ–¥–∏—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ stdout
    const ytdlArgs = [
        url,
        '-f', 'bestaudio', 
        '-o', '-', // –í—ã–≤–æ–¥ –≤ stdout
        '--no-playlist',
        '--quiet',
        '--user-agent', FAKE_USER_AGENT,
        '--no-cache-dir',
        '--rm-cache-dir',
    ];

    // –î–æ–±–∞–≤–ª—è–µ–º FFMPEG –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –ø–æ—Ç–æ–∫–∞ –≤ MP3 (–ö–†–ò–¢–ò–ß–ù–û –¥–ª—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö Telegram)
    if (FFMPEG_AVAILABLE) {
        ytdlArgs.push(
            '--exec', 
            // ffmpeg -i pipe:0 -c:a libmp3lame -q:a 0 -f mp3 pipe:1
            `${ffmpegPath} -i pipe:0 -c:a libmp3lame -q:a 0 -f mp3 pipe:1`
        );
    }
    
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
    if (PROXY_URL) ytdlArgs.push('--proxy', PROXY_URL);
    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–∞—É—Ç–∞ (–ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
    ytdlArgs.push('--socket-timeout', YTDL_TIMEOUT);

    // 4. –ó–ê–ü–£–°–ö –ü–†–û–¶–ï–°–°–ê –ò –ù–ê–°–¢–†–û–ô–ö–ê –ü–û–¢–û–ö–û–í
    const downloader = spawn('yt-dlp', ytdlArgs); 
    const stream = new PassThrough();

    // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ stdout yt-dlp —Å –ø–æ—Ç–æ–∫–æ–º-–±—É—Ñ–µ—Ä–æ–º –¥–ª—è Telegram
    downloader.stdout.pipe(stream);

    // 5. –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö –ü–†–û–¶–ï–°–°–ê
    let errorMessage = '';
    downloader.stderr.on('data', (data) => {
        errorMessage += data.toString();
    });

    // –û—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    downloader.on('close', (code) => {
        if (code !== 0 && code !== null) {
            console.error(`[DL ERROR] yt-dlp process exited with code ${code}. Error message: ${errorMessage.trim()}`);
            // –í–∞–∂–Ω–æ: –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π, –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–æ–∫
            if (!stream.destroyed) stream.destroy(new Error(`yt-dlp exited with error: ${errorMessage.trim()}`));
        }
    });

    downloader.on('error', (err) => {
        console.error('[DL ERROR] –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ yt-dlp:', err);
        if (!stream.destroyed) stream.destroy(err);
    });

    // 6. –û–¢–ü–†–ê–í–ö–ê –ü–û–¢–û–ö–ê –í TELEGRAM
    try {
        const file = {
            source: stream,
            filename: `${sanitizedFilename}.mp3`
        };
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏
        const message = await bot.telegram.sendAudio(userId, file, {
            title: metadata.title,
            performer: metadata.uploader,
            duration: metadata.duration,
            thumb: metadata.thumbnail ? { url: metadata.thumbnail } : undefined, 
            caption: T('downloadedBy'),
            parse_mode: 'HTML',
            reply_markup: {
                inline_keyboard: [[{ text: 'üéß –ù–∞–π—Ç–∏ –µ—â—ë', switch_inline_query_current_chat: '' }]]
            }
        });

        // 7. –°–û–•–†–ê–ù–ï–ù–ò–ï file_id –î–õ–Ø –ö–≠–®–ò–†–û–í–ê–ù–ò–Ø
        if (message.audio?.file_id) {
            const trackId = await db.incrementDownloadsAndSaveTrack(
                userId,
                url,
                metadata.title,
                message.audio.file_id
            );
            console.log(`[DL SUCCESS] ${url} (Stream) –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ ${Date.now() - startStream}ms. Track ID: ${trackId}`);
        } else {
            console.warn(`[DL WARN] ${url} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –Ω–æ file_id –Ω–µ –ø–æ–ª—É—á–µ–Ω –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è.`);
        }
        
        return true;

    } catch (e) {
        // –û—à–∏–±–∫–∞ Telegram (–Ω–∞–ø—Ä–∏–º–µ—Ä, 400 FILE_SIZE_TOO_BIG, 404)
        console.error(`[DL ERROR] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—Ç–æ–∫–∞ –≤ Telegram (${userId}):`, e.message);
        
        // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        let userErrorText = T('downloadError');
        if (e.message.includes('FILE_SIZE_TOO_BIG')) {
             userErrorText = `‚ùå –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π (>${(MAX_FILE_SIZE_BYTES / 1024 / 1024).toFixed(0)} –ú–ë).`;
        } else if (e.message.includes('yt-dlp exited with error')) {
             userErrorText = `‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${e.message.split(':').pop().trim()}`;
        }
        await safeSendMessage(userId, userErrorText);
        
        return false;
    } finally {
        // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å yt-dlp –∑–∞–≤–µ—Ä—à—ë–Ω
        downloader.kill(); 
    }
}


// ========================= QUEUE MANAGEMENT =========================

/**
 * –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç–∞–Ω—Å –æ—á–µ—Ä–µ–¥–∏ –∑–∞–≥—Ä—É–∑–æ–∫ —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏.
 * üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä TaskQueue –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å –û–î–ù–ò–ú –æ–±—ä–µ–∫—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫.
 */
export const downloadQueue = new TaskQueue({ // <-- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ –æ–¥–∏–Ω –æ–±—ä–µ–∫—Ç
    taskProcessor: trackDownloadProcessor, // <-- –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∫–∞–∫ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞
    concurrency: MAX_CONCURRENT_DOWNLOADS,
    autoStart: true,
    name: 'DownloadQueue'
});

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–æ–∫.
 * üö® –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–µ—Ä–µ–¥–∞–µ–º –û–î–ò–ù –æ–±—ä–µ–∫—Ç –≤ –º–µ—Ç–æ–¥ add().
 */
export function enqueue(task, ctx, metadata) {
    if (!task || !metadata) {
        console.error('[DownloadManager] –ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é –∑–∞–¥–∞—á—É.');
        return false;
    }
    
    // –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞: 1000 (Unlim), 100 (Pro), 30 (Plus), 5 (Free)
    const priority = task.priority || 5; 
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –û–î–ò–ù –æ–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è TaskQueue.add()
    downloadQueue.add({
        userId: task.userId, // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ userId, url –∏ —Ç.–¥. –≤ task
        url: task.url,
        originalUrl: task.originalUrl,
        metadata: metadata, // metadata, –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è –∏–∑–≤–Ω–µ
        priority: priority,
        ctx: ctx // –ö–æ–Ω—Ç–µ–∫—Å—Ç –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤
    });
    
    console.log(`[DownloadManager] –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ${task.url} (P: ${priority})`);
    return true;
}

// –£–¥–∞–ª—è–µ–º startCacheCleanup, —Ç–∞–∫ –∫–∞–∫ –º—ã —Ç–µ–ø–µ—Ä—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã –Ω–∞ –¥–∏—Å–∫.

// ========================= INITIALIZATION =========================

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ DownloadManager
 */
export function initializeDownloadManager() {
    console.log('[DownloadManager] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞.');
    console.log(`[DownloadManager] FFMPEG –¥–æ—Å—Ç—É–ø–µ–Ω: ${FFMPEG_AVAILABLE ? '‚úÖ' : '‚ùå'}`);
    console.log(`[DownloadManager] –ú–∞–∫—Å–∏–º—É–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∑–æ–∫: ${MAX_CONCURRENT_DOWNLOADS}`);
    console.log(`[DownloadManager] –ö–∞–Ω–∞–ª-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ: ${STORAGE_CHANNEL_ID ? '‚úÖ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' : '‚ö†Ô∏è –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}`);
}

// ========================= EXPORTS SUMMARY =========================
// –û—Å–Ω–æ–≤–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç—ã:
// - trackDownloadProcessor: –≤–æ—Ä–∫–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏ (—Ç–µ–ø–µ—Ä—å –Ω–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—è)
// - downloadQueue: –≥–ª–æ–±–∞–ª—å–Ω–∞—è –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏
// - enqueue: —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å
// - initializeDownloadManager: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ index.js)