// src/bot.js (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –° –ü–†–ê–í–ò–õ–¨–ù–´–ú –ü–û–†–Ø–î–ö–û–ú –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í)

import { Telegraf, Markup } from 'telegraf';
import * as commands from './bot/commands.js';
import * as hears from './bot/hears.js';
import * as actions from './bot/actions.js';
import { updateUserField } from './db.js';
import { allTextsSync } from './config/texts.js';
import { enqueue } from './services/downloadManager.js';

const bot = new Telegraf(process.env.BOT_TOKEN, {
    handlerTimeout: 90_000 // 90 —Å–µ–∫—É–Ω–¥
});

bot.catch(async (err, ctx) => {
    console.error(`üî¥ [Telegraf Catch] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è update ${ctx.update.update_id}:`, err);
    if (err instanceof Telegraf.TelegramError && err.response?.error_code === 403) {
        const userId = ctx.from?.id;
        if (userId) {
            console.warn(`[Telegraf Catch] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –û—Ç–∫–ª—é—á–∞–µ–º.`);
            await updateUserField(userId, 'active', false).catch(dbError => {
                console.error(`[Telegraf Catch] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, dbError);
            });
        }
    }
});

// ======================= –°–ù–ê–ß–ê–õ–ê –ò–î–£–¢ –ö–û–ù–ö–†–ï–¢–ù–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò =======================

// –ö–æ–º–∞–Ω–¥—ã
bot.start(commands.start);
bot.command('admin', commands.admin);
bot.command('premium', hears.upgrade); // –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ü–ï–†–ï–î .on('text')

// –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
bot.hears('üìã –ú–µ–Ω—é', hears.menu);
bot.hears('‚ÑπÔ∏è –ü–æ–º–æ—â—å', hears.help);
bot.hears('üîì –†–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç', hears.upgrade);
bot.hears('üéµ –ú–æ–∏ —Ç—Ä–µ–∫–∏', hears.myTracks);

// Inline-–∫–Ω–æ–ø–∫–∏
bot.action('check_subscription', actions.checkSubscription);


// ======================= –ò –¢–û–õ–¨–ö–û –í –ö–û–ù–¶–ï - –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–ê =======================
// –û–Ω —Å—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–∏ –æ–¥–∏–Ω –∏–∑ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤—ã—à–µ –Ω–µ –ø–æ–¥–æ—à–µ–ª.
bot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    const userText = ctx.message.text;

    // –≠—Ç–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–µ–ø–µ—Ä—å –Ω–µ —Ç–∞–∫ –≤–∞–∂–Ω—ã, —Ç–∞–∫ –∫–∞–∫ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã,
    // –Ω–æ –æ—Å—Ç–∞–≤–∏–º –∏—Ö –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
    if (userText.startsWith('/')) {
        return; 
    }
    if (Object.values(allTextsSync()).includes(userText)) {
        return;
    }

    console.log(`[Bot] –ü–æ–ª—É—á–µ–Ω–æ –ù–ï–∫–æ–º–∞–Ω–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userId}, –∏—â–µ–º —Å—Å—ã–ª–∫—É...`);
    try {
        // –ò—â–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ SoundCloud –∏–ª–∏ Spotify
        const url = userText.match(/(https?:\/\/[^\s]+)/g)?.find(u => u.includes('soundcloud.com') || u.includes('spotify.com'));

        if (url) {
            await enqueue(ctx, userId, url);
        } else {
            // –¢–µ–ø–µ—Ä—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ "–Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π" —Ç–µ–∫—Å—Ç
            await ctx.reply('–Ø –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.');
        }
    } catch (e) {
        console.error(`[Bot] –û—à–∏–±–∫–∞ –≤ –æ–±—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è ${userId}:`, e);
    }
});

export { bot };