// ======================= –§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø BOT.JS =======================

import { Telegraf, Markup, TelegramError } from 'telegraf';
import { HttpsProxyAgent } from 'https-proxy-agent';
import { ADMIN_ID, BOT_TOKEN, WEBHOOK_URL, CHANNEL_USERNAME, STORAGE_CHANNEL_ID, PROXY_URL } from './config.js';
import { updateUserField, getUser, createUser, setPremium, getAllUsers, resetDailyLimitIfNeeded, getCachedTracksCount, logUserAction, getTopFailedSearches, getTopRecentSearches, getNewUsersCount,findCachedTrack,           // <--- –î–û–ë–ê–í–ò–¢–¨
    incrementDownloadsAndSaveTrack, getReferrerInfo, getReferredUsers, resetExpiredPremiumIfNeeded, getReferralStats} from './db.js';
import { T, allTextsSync } from './config/texts.js';
import { performInlineSearch } from './services/searchManager.js';
import { spotifyEnqueue } from './services/spotifyManager.js';
import { downloadQueue, enqueue } from './services/downloadManager.js';
import execYoutubeDl from 'youtube-dl-exec';
import { handleReferralCommand, processNewUserReferral } from './services/referralManager.js';
import { isShuttingDown, isMaintenanceMode, setMaintenanceMode } from './services/appState.js';



// --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏ —Ö–µ–ª–ø–µ—Ä—ã ---
const playlistSessions = new Map();
const TRACKS_PER_PAGE = 5;

function getYoutubeDl() {
    const options = {};
    if (PROXY_URL) {
        options.proxy = PROXY_URL;
    }
    
    // –§–ª–∞–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∫ –ö–ê–ñ–î–û–ú–£ –≤—ã–∑–æ–≤—É youtube-dl –∏–∑ —ç—Ç–æ–≥–æ —Ñ–∞–π–ª–∞
    const defaultFlags = {
        'extractor-args': 'soundcloud:player_client_id=CLIENT_ID',
        'no-warnings': true
    };
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ —Ñ–ª–∞–≥–∏ —Å —Ç–µ–º–∏, —á—Ç–æ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –ø—Ä–∏ –≤—ã–∑–æ–≤–µ
    return (url, flags) => execYoutubeDl(url, { ...defaultFlags, ...flags }, options);
}
/**
 * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å, –Ω–µ –±–ª–æ–∫–∏—Ä—É—è –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫.
 * –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–æ—Ç—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –≤ —Ñ–æ–Ω–µ.
 * @param {object} task - –û–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è downloadManager.
 */
// –ó–ê–ú–ï–ù–ò –¶–ï–õ–ò–ö–û–ú –§–£–ù–ö–¶–ò–Æ addTaskToQueue –í bot.js

async function addTaskToQueue(task) {
    try {
        // –í–∞–ª–∏–¥–∏—Ä—É–µ–º payload (–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞—á–∞ –Ω–µ "–ø—É—Å—Ç–∞—è")
        const url = task.url || task.originalUrl;
        if (!url && !task.metadata) {
            console.error('[Queue] –ó–∞–¥–∞—á–∞ –±–µ–∑ url/originalUrl/metadata ‚Äî –Ω–µ –¥–æ–±–∞–≤–ª—è—é:', task);
            return;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await getUser(task.userId);
        const priority = user ? (user.premium_limit || 5) : 5;
        
        // –ù–æ–≤—ã–π, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–æ–≥
        console.log('[Queue] –î–æ–±–∞–≤–ª—è—é –∑–∞–¥–∞—á—É', {
            userId: task.userId,
            prio: priority,
            url,
            hasMeta: !!task.metadata
        });
        
        // –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –û–ë–™–ï–ö–¢ –ó–ê–î–ê–ß–ò, –∞ –Ω–µ —Ñ—É–Ω–∫—Ü–∏—é
        downloadQueue.add({ ...task, priority });
    } catch (e) {
        console.error(`[Queue] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è ${task.userId}:`, e);
    }
}
// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
function escapeHtml(text) {
    if (typeof text !== 'string') return '';
    return text.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/&/g, '&amp;');
}
async function isSubscribed(userId) {
    if (!CHANNEL_USERNAME) return false;
    try {
        const member = await bot.telegram.getChatMember(CHANNEL_USERNAME, userId);
        return ['creator', 'administrator', 'member'].includes(member.status);
    } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è ${userId} –Ω–∞ ${CHANNEL_USERNAME}:`, e.message);
        return false;
    }
}

function getTariffName(limit) {
    if (limit >= 10000) return 'Unlimited ‚Äî üíé';
    if (limit >= 100) return 'Pro ‚Äî 100 üí™';
    if (limit >= 30) return 'Plus ‚Äî 30 üéØ';
    return 'üÜì Free ‚Äî 5 üü¢';
}

function getDaysLeft(premiumUntil) {
    if (!premiumUntil) return 0;
    const diff = new Date(premiumUntil) - new Date();
    return Math.max(Math.ceil(diff / 86400000), 0);
}

// bot.js

// bot.js

function formatMenuMessage(user, botUsername) {
    // 1. –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ)
    const tariffLabel = getTariffName(user.premium_limit);
    const downloadsToday = user.downloads_today || 0;
    const daysLeft = getDaysLeft(user.premium_until);
    const referralCount = user.referral_count || 0;
    const referralLink = `https://t.me/${botUsername}?start=ref_${user.id}`;
    
    // 2. –°–æ–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–æ–Ω –Ω–µ—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π, —Ç.–∫. —ç—Ç–æ –¥–∞–Ω–Ω—ã–µ)
    const statsBlock = [
        `üíº <b>–¢–∞—Ä–∏—Ñ:</b> <i>${tariffLabel}</i>`,
        `‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:</b> <i>${daysLeft}</i>`,
        `üéß <b>–°–µ–≥–æ–¥–Ω—è —Å–∫–∞—á–∞–Ω–æ:</b> <i>${downloadsToday}</i> –∏–∑ <i>${user.premium_limit}</i>`
    ].join('\n');
    
    // 3. –ë–µ—Ä–µ–º —à–∞–±–ª–æ–Ω—ã –∏–∑ T() –∏ –∑–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
    const header = T('menu_header').replace('{first_name}', escapeHtml(user.first_name) || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å');
    
    const referralBlock = T('menu_referral_block')
        .replace('{referral_count}', referralCount)
        .replace('{referral_link}', referralLink);
    
    let bonusBlock = '';
    if (!user.subscribed_bonus_used && CHANNEL_USERNAME) {
        const cleanUsername = CHANNEL_USERNAME.replace('@', '');
        const channelLink = `<a href="https://t.me/${cleanUsername}">–Ω–∞—à –∫–∞–Ω–∞–ª</a>`;
        bonusBlock = T('menu_bonus_block').replace('{channel_link}', channelLink);
    }
    
    const footer = T('menu_footer');
    
    // 4. –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —á–∞—Å—Ç–∏ –≤–º–µ—Å—Ç–µ, –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤—ã–≤–∞—è –ø—É—Å—Ç—ã–µ –±–ª–æ–∫–∏
    const messageParts = [
        header,
        statsBlock,
        '\n- - - - - - - - - - - - - - -',
        referralBlock,
        bonusBlock, // –≠—Ç–æ—Ç –±–ª–æ–∫ –¥–æ–±–∞–≤–∏—Ç—Å—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø—É—Å—Ç–æ–π
        footer
    ];
    
    return messageParts.filter(Boolean).join('\n\n');
}

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegraf ---
const telegrafOptions = { handlerTimeout: 300_000 };
if (PROXY_URL) {
    const agent = new HttpsProxyAgent(PROXY_URL);
    telegrafOptions.telegram = { agent };
    console.log('[App] –ò—Å–ø–æ–ª—å–∑—É—é –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API.');
}
export const bot = new Telegraf(BOT_TOKEN, telegrafOptions);

// --- Middleware ---
// –ó–ê–ú–ï–ù–ò –°–¢–ê–†–´–ô –ë–õ–û–ö bot.catch –ù–ê –≠–¢–û–¢ –í –§–ê–ô–õ–ï bot.js

bot.catch(async (err, ctx) => {
    // –®–∞–≥ 1: –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –∫–æ–Ω—Å–æ–ª—å, –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ.
    console.error(`üî¥ [Telegraf Catch] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è update ${ctx.update.update_id}:`, err);
    
    // –®–∞–≥ 2: –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞.
    const updateInfo = ctx.update ? JSON.stringify(ctx.update, null, 2) : 'N/A';
    const errorMessage = `
üî¥ <b>–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ!</b>

<b>–¢–∏–ø –æ—à–∏–±–∫–∏:</b>
<code>${err.name || 'UnknownError'}</code>

<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
<code>${err.message || 'No message'}</code>

<b>–ì–¥–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞:</b>
<code>${err.stack ? err.stack.split('\n')[1].trim() : 'Stack trace unavailable'}</code>

<b>Update, –≤—ã–∑–≤–∞–≤—à–∏–π –æ—à–∏–±–∫—É:</b>
<pre><code class="language-json">${updateInfo.slice(0, 3500)}</code></pre>
    `;
    
    // –®–∞–≥ 3: –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É.
    try {
        // –£–±–µ–¥–∏—Å—å, —á—Ç–æ ADMIN_ID –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –∏–∑ config.js
        await bot.telegram.sendMessage(ADMIN_ID, errorMessage, { parse_mode: 'HTML' });
    } catch (sendError) {
        console.error('üî•üî•üî• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É!', sendError);
    }
    
    // –®–∞–≥ 4: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞—Å—Ç–Ω—ã–π —Å–ª—É—á–∞–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–æ—Ç–∞ (–∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ).
    if (err instanceof TelegramError && err.response?.error_code === 403) {
        if (ctx.from?.id) {
            await updateUserField(ctx.from.id, 'active', false);
        }
    }
});
bot.use(async (ctx, next) => {
    if (!ctx.from) return next();
    
    // –ü—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å payload –∏–∑ deep link:
    // 1) ctx.startPayload ‚Äî –µ—Å—Ç—å –Ω–∞ /start
    // 2) –∑–∞–ø–∞—Å–Ω–æ–π —Å–ø–æ—Å–æ–± ‚Äî –∏–∑ —Ç–µ–∫—Å—Ç–∞ '/start ref_xxx'
    const payload =
        (typeof ctx.startPayload === 'string' && ctx.startPayload) ||
        (ctx.message?.text?.startsWith('/start ') ? ctx.message.text.split(' ')[1] : null) ||
        null;
    
    // –í–ê–ñ–ù–û: –ø–µ—Ä–µ–¥–∞—ë–º payload –≤ getUser ‚Äî –æ–Ω —Å–∞–º –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç referrer_id –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
    const user = await getUser(ctx.from.id, ctx.from.first_name, ctx.from.username, payload);
    ctx.state.user = user;
    
    if (user && user.active === false) return;
    
    // –ü–æ –∂–µ–ª–∞–Ω–∏—é: –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞—Å—Å—ã–ª–æ–∫
    if (user && user.can_receive_broadcasts === false) {
        try { await updateUserField(user.id, { can_receive_broadcasts: true }); } catch (e) {
            console.error('[Broadcast flag] update error:', e.message);
        }
    }
    
    await resetDailyLimitIfNeeded(ctx.from.id);
    await resetExpiredPremiumIfNeeded(ctx.from.id);
    return next();
});
bot.start(async (ctx) => {
                // ==========================================================
                //            –î–û–ë–ê–í–¨ –≠–¢–£ –°–¢–†–û–ö–£ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
                // ==========================================================
                console.log('[START] got start for', ctx.from.id, 'payload=', ctx.startPayload);
                // ==========================================================
                
                console.log(`[DEBUG] Checkpoint 1 (bot.start): startPayload = ${ctx.startPayload}`);
                // 1. –ú—ã –≤—ã–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û getUser, –ø–µ—Ä–µ–¥–∞–≤–∞—è –≤ –Ω–µ–≥–æ –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤–∫–ª—é—á–∞—è startPayload.
                // getUser —Å–∞–º —Ä–∞–∑–±–µ—Ä–µ—Ç—Å—è: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç - —Å–æ–∑–¥–∞—Å—Ç –µ–≥–æ —Å referrer_id, –µ—Å–ª–∏ –µ—Å—Ç—å - –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ—Ç.
    const user = await getUser(ctx.from.id, ctx.from.first_name, ctx.from.username, ctx.startPayload || null);
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.
    const isNewRegistration = (Date.now() - new Date(user.created_at).getTime()) < 5000;
    
    // 3. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, –∑–∞–ø—É—Å–∫–∞–µ–º –≤—Å—é –ª–æ–≥–∏–∫—É –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤.
    if (isNewRegistration) {
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–∞–º —Ñ–∞–∫—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await logUserAction(ctx.from.id, 'registration');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É.
        // –û–Ω–∞ —Å–∞–º–∞ –ø—Ä–æ–≤–µ—Ä–∏—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è referrer_id, –∏ –Ω–∞—á–∏—Å–ª–∏—Ç –±–æ–Ω—É—Å—ã.
        await processNewUserReferral(user, ctx);
    }
    
    // 4. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    const startMessage = isNewRegistration ? T('start_new_user') : T('start');
    
    await ctx.reply(startMessage, {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        ...Markup.keyboard([
            [T('menu'), T('upgrade')],
            [T('mytracks'), T('help')]
        ]).resize()
    });
});
bot.command('admin', async (ctx) => {
    if (ctx.from.id !== ADMIN_ID) return;
    try {
        await ctx.reply('‚è≥ –°–æ–±–∏—Ä–∞—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É...');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫ –±–∞–∑–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        const [
            users,
            cachedTracksCount,
            topFailed,
            topRecent,
            newUsersToday, // <-- –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            newUsersWeek // <-- –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        ] = await Promise.all([
            getAllUsers(true),
            getCachedTracksCount(),
            getTopFailedSearches(5),
            getTopRecentSearches(5),
            getNewUsersCount(1), // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã—Ö –∑–∞ 1 –¥–µ–Ω—å
            getNewUsersCount(7) // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π
        ]);
        
        // --- –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
        const totalUsers = users.length;
        const activeUsers = users.filter(u => u.active).length;
        const activeToday = users.filter(u => u.last_active && new Date(u.last_active).toDateString() === new Date().toDateString()).length;
        const totalDownloads = users.reduce((sum, u) => sum + (u.total_downloads || 0), 0);
        let storageStatusText = STORAGE_CHANNEL_ID ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
        
        // --- –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ---
        let statsMessage = `<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞</b>\n\n` +
            `<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n` +
            `   - –í—Å–µ–≥–æ: <i>${totalUsers}</i>\n` +
            `   - –ê–∫—Ç–∏–≤–Ω—ã—Ö: <i>${activeUsers}</i>\n` +
            `   - <b>–ù–æ–≤—ã—Ö –∑–∞ 24—á: <i>${newUsersToday}</i></b>\n` + // <-- –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            `   - <b>–ù–æ–≤—ã—Ö –∑–∞ 7 –¥–Ω–µ–π: <i>${newUsersWeek}</i></b>\n` + // <-- –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
            `   - –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: <i>${activeToday}</i>\n\n` +
            `<b>üì• –ó–∞–≥—Ä—É–∑–∫–∏:</b>\n   - –í—Å–µ–≥–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <i>${totalDownloads}</i>\n\n`;
        
        // –ë–ª–æ–∫ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if (topFailed.length > 0) {
            statsMessage += `---\n\n<b>üî• –¢–æ–ø-5 –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–≤—Å–µ–≥–æ):</b>\n`;
            topFailed.forEach((item, index) => {
                statsMessage += `${index + 1}. <code>${item.query.slice(0, 30)}</code> (–∏—Å–∫–∞–ª–∏ <i>${item.search_count}</i> —Ä–∞–∑)\n`;
            });
            statsMessage += `\n`;
        }
        
        // –ë–ª–æ–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        if (topRecent.length > 0) {
            statsMessage += `<b>üìà –¢–æ–ø-5 –∑–∞–ø—Ä–æ—Å–æ–≤ (–∑–∞ 24 —á–∞—Å–∞):</b>\n`;
            topRecent.forEach((item, index) => {
                statsMessage += `${index + 1}. <code>${item.query.slice(0, 30)}</code> (–∏—Å–∫–∞–ª–∏ <i>${item.total}</i> —Ä–∞–∑)\n`;
            });
            statsMessage += `\n`;
        }
        
        // –°–∏—Å—Ç–µ–º–Ω—ã–π –±–ª–æ–∫
        statsMessage += `---\n\n<b>‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞:</b>\n` +
            `   - –û—á–µ—Ä–µ–¥—å: <i>${downloadQueue.size}</i> –≤ –æ–∂. / <i>${downloadQueue.pending}</i> –≤ —Ä–∞–±.\n` +
            `   - –ö–∞–Ω–∞–ª-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ: <i>${storageStatusText}</i>\n   - –¢—Ä–µ–∫–æ–≤ –≤ –∫—ç—à–µ: <i>${cachedTracksCount}</i>\n\n` +
            `<b>üîó –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n<a href="${WEBHOOK_URL.replace(/\/$/, '')}/dashboard">–û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥</a>`;
        
        await ctx.reply(statsMessage, { parse_mode: 'HTML', disable_web_page_preview: true });
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /admin:', e);
        await ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.');
    }
});
bot.command('referral', handleReferralCommand);
// bot.js

// –ó–ê–ú–ï–ù–ò–¢–ï –í–ê–®–£ –í–ï–†–°–ò–Æ –ù–ê –≠–¢–£
bot.command('maintenance', (ctx) => {
    if (ctx.from.id !== ADMIN_ID) return;
    
    const command = ctx.message.text.split(' ')[1]?.toLowerCase();
    
    if (command === 'on') {
        setMaintenanceMode(true);
        ctx.reply('‚úÖ –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –í–ö–õ–Æ–ß–ï–ù.');
    } else if (command === 'off') {
        setMaintenanceMode(false);
        ctx.reply('‚òëÔ∏è –†–µ–∂–∏–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è –í–´–ö–õ–Æ–ß–ï–ù.');
    } else {
        // =====> –í–û–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï <=====
        ctx.reply('‚ÑπÔ∏è –°—Ç–∞—Ç—É—Å: ' + (isMaintenanceMode ? '–í–ö–õ–Æ–ß–ï–ù' : '–í–´–ö–õ–Æ–ß–ï–ù') + '\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/maintenance on` –∏–ª–∏ `/maintenance off`'); // –ü–†–ê–í–ò–õ–¨–ù–û
}
});
bot.command('premium', (ctx) => ctx.reply(T('upgradeInfo'), { parse_mode: 'HTML', disable_web_page_preview: true }));
// bot.js
// ==========================================================
//    –î–û–ë–ê–í–¨ –≠–¢–û–¢ –ë–õ–û–ö –î–õ–Ø –û–ë–†–ê–ë–û–¢–ö–ò –ö–ù–û–ü–ö–ò "–ü–û–õ–£–ß–ò–¢–¨ –ë–û–ù–£–°"
// ==========================================================

bot.action('check_subscription', async (ctx) => {
    try {
        console.log(`[Bonus] User ${ctx.from.id} –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –±–æ–Ω—É—Å.`);

        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        const user = await getUser(ctx.from.id);
        if (user.subscribed_bonus_used) {
            console.log(`[Bonus] User ${ctx.from.id} —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ–Ω—É—Å.`);
            return await ctx.answerCbQuery('–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –±–æ–Ω—É—Å.', { show_alert: true });
        }

        console.log(`[Bonus] –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è ${ctx.from.id} –Ω–∞ –∫–∞–Ω–∞–ª ${CHANNEL_USERNAME}`);
        const subscribed = await isSubscribed(ctx.from.id);

        if (subscribed) {
            console.log(`[Bonus] User ${ctx.from.id} –ø–æ–¥–ø–∏—Å–∞–Ω. –ù–∞—á–∏—Å–ª—è—é –±–æ–Ω—É—Å.`);
            await setPremium(ctx.from.id, 30, 7); // 30 —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –≤ –¥–µ–Ω—å –Ω–∞ 7 –¥–Ω–µ–π
            await updateUserField(ctx.from.id, 'subscribed_bonus_used', true);
            await logUserAction(ctx.from.id, 'bonus_received');
            
            // –ó–∞–≤–µ—Ä—à–∞–µ–º "–∑–∞–≥—Ä—É–∑–∫—É" –∫–Ω–æ–ø–∫–∏
            await ctx.answerCbQuery('–ë–æ–Ω—É—Å –Ω–∞—á–∏—Å–ª–µ–Ω!');
            // –ú–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –∏—Å—á–µ–∑–ª–∞
            await ctx.editMessageText('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!');

        } else {
            console.log(`[Bonus] User ${ctx.from.id} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω.`);
            return await ctx.answerCbQuery(`–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª ${CHANNEL_USERNAME}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞.`, { show_alert: true });
        }
    } catch (e) {
        console.error(`üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ check_subscription –¥–ª—è user ${ctx.from.id}:`, e);
        // –í —Å–ª—É—á–∞–µ –ª—é–±–æ–π –æ—à–∏–±–∫–∏, –º—ã –¥–æ–ª–∂–Ω—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å "–∑–∞–≥—Ä—É–∑–∫—É" –∫–Ω–æ–ø–∫–∏
        await ctx.answerCbQuery('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.', { show_alert: true });
    }
});
bot.hears(T('menu'), async (ctx) => {
    // 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞—à–∞ –Ω–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è getUser —Ç–µ–ø–µ—Ä—å –≤–µ—Ä–Ω–µ—Ç –∏ user.referral_count
    const user = await getUser(ctx.from.id);

    // 2. –í—ã–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é formatMenuMessage, –ø–µ—Ä–µ–¥–∞–≤–∞—è –µ–π –æ–±—ä–µ–∫—Ç user –∏ –∏–º—è –±–æ—Ç–∞
    const message = formatMenuMessage(user, ctx.botInfo.username);

    // 3. –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const extraOptions = { 
        parse_mode: 'HTML',
        disable_web_page_preview: true
    };
    if (!user.subscribed_bonus_used && CHANNEL_USERNAME) {
        extraOptions.reply_markup = { 
            inline_keyboard: [[ Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –∏ —Ö–æ—á—É –±–æ–Ω—É—Å!', 'check_subscription') ]] 
        };
    }
    
    await ctx.reply(message, extraOptions);
});
bot.hears(T('mytracks'), async (ctx) => {
    try {
        const user = await getUser(ctx.from.id);
        if (!user.tracks_today || user.tracks_today.length === 0) return await ctx.reply(T('noTracks'));
        for (let i = 0; i < user.tracks_today.length; i += 10) {
            const chunk = user.tracks_today.slice(i, i + 10).filter(t => t && t.fileId);
            if (chunk.length > 0) await ctx.replyWithMediaGroup(chunk.map(t => ({ type: 'audio', media: t.fileId })));
        }
    } catch (e) { console.error(`üî¥ –û—à–∏–±–∫–∞ –≤ mytracks –¥–ª—è ${ctx.from.id}:`, e.message); }
});
bot.hears(T('help'), (ctx) => ctx.reply(T('helpInfo'), { parse_mode: 'HTML', disable_web_page_preview: true }));
bot.hears(T('upgrade'), (ctx) => ctx.reply(T('upgradeInfo'), { parse_mode: 'HTML', disable_web_page_preview: true }));
bot.on('inline_query', async (ctx) => {
    const query = ctx.inlineQuery.query;
    if (!query || query.trim().length < 2) return await ctx.answerInlineQuery([], { switch_pm_text: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞...', switch_pm_parameter: 'start' });
    try {
        const results = await performInlineSearch(query, ctx.from.id);
        await ctx.answerInlineQuery(results, { cache_time: 60 });
    } catch (error) {
        console.error('[Inline Query] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞:', error);
        await ctx.answerInlineQuery([]);
    }
});

// --- –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ ---
function generateInitialPlaylistMenu(playlistId, trackCount) {
    return Markup.inlineKeyboard([
        [Markup.button.callback(`üì• –°–∫–∞—á–∞—Ç—å –≤—Å–µ (${trackCount})`, `pl_download_all:${playlistId}`)],
        [Markup.button.callback('üì• –°–∫–∞—á–∞—Ç—å –ø–µ—Ä–≤—ã–µ 10', `pl_download_10:${playlistId}`)],
        [Markup.button.callback('üìù –í—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–∫–∏ –≤—Ä—É—á–Ω—É—é', `pl_select_manual:${playlistId}`)],
        [Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∞', `pl_cancel:${playlistId}`)]
    ]);
}

function generateSelectionMenu(userId) {
    const session = playlistSessions.get(userId);
    if (!session) return null;
    const { tracks, selected, currentPage, playlistId, title } = session;
    const totalPages = Math.ceil(tracks.length / TRACKS_PER_PAGE);
    const startIndex = currentPage * TRACKS_PER_PAGE;
    const tracksOnPage = tracks.slice(startIndex, startIndex + TRACKS_PER_PAGE);
    const trackRows = tracksOnPage.map((track, index) => {
        const absoluteIndex = startIndex + index;
        const isSelected = selected.has(absoluteIndex);
        const icon = isSelected ? '‚úÖ' : '‚¨úÔ∏è';
        const trackTitleText = track.title || '–¢—Ä–µ–∫ –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        const trackTitle = trackTitleText.length > 50 ? trackTitleText.slice(0, 47) + '...' : trackTitleText;
        return [Markup.button.callback(`${icon} ${trackTitle}`, `pl_toggle:${playlistId}:${absoluteIndex}`)];
    });
    const navRow = [];
    if (currentPage > 0) navRow.push(Markup.button.callback('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', `pl_page:${playlistId}:${currentPage - 1}`));
    navRow.push(Markup.button.callback(`${currentPage + 1}/${totalPages}`, 'pl_nop'));
    if (currentPage < totalPages - 1) navRow.push(Markup.button.callback('–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è', `pl_page:${playlistId}:${currentPage + 1}`));
    const actionRow = [
        Markup.button.callback(`‚úÖ –ì–æ—Ç–æ–≤–æ (${selected.size})`, `pl_finish:${playlistId}`),
        Markup.button.callback(`‚ùå –û—Ç–º–µ–Ω–∞`, `pl_cancel:${playlistId}`)
    ];
    const messageText = `üé∂ <b>${title}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç—Ä–µ–∫–∏ (–°—Ç—Ä. ${currentPage + 1}/${totalPages}):`;
    return {
        text: messageText,
        options: { parse_mode: 'HTML', ...Markup.inlineKeyboard([...trackRows, navRow, actionRow]) }
    };
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ –ø–ª–µ–π–ª–∏—Å—Ç–æ–≤ (actions) ---
bot.action('pl_nop', (ctx) => ctx.answerCbQuery());

// bot.js

// bot.js (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –ö–ù–û–ü–û–ö –ü–õ–ï–ô–õ–ò–°–¢–ê –° –ö–û–†–†–ï–ö–¢–ù–´–ú–ò –õ–ò–ú–ò–¢–ê–ú–ò)

bot.action(/pl_download_all:|pl_download_10:/, async (ctx) => {
    const isAll = ctx.callbackQuery.data.includes('pl_download_all');
    const playlistId = ctx.callbackQuery.data.split(':')[1];
    const userId = ctx.from.id;
    const session = playlistSessions.get(userId);
    
    if (!session) {
        return await ctx.answerCbQuery('‚ùóÔ∏è –°–µ—Å—Å–∏—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–∞.', { show_alert: true });
    }
    
    // --- 1. –î–æ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    if (!session.fullTracks) {
        await ctx.answerCbQuery('‚è≥ –ü–æ–ª—É—á–∞—é –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞...');
        await ctx.editMessageText('‚è≥ –ü–æ–ª—É—á–∞—é –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
        
        try {
            const youtubeDl = getYoutubeDl();
            const fullData = await youtubeDl(session.originalUrl, { dumpSingleJson: true });
            session.tracks = fullData.entries.filter(track => track && track.url);
            session.fullTracks = true;
        } catch (e) {
            console.error('[Playlist] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–∑–≤–∞–Ω–∏–π:', e);
            await ctx.editMessageText('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞.');
            return await ctx.answerCbQuery('–û—à–∏–±–∫–∞!', { show_alert: true });
        }
    }
    
    // --- 2. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –ª–∏–º–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    const user = await getUser(userId);
    const remainingLimit = user.premium_limit - (user.downloads_today || 0);
    
    if (remainingLimit <= 0) {
  const bonusAvailable = Boolean(CHANNEL_USERNAME && !user.subscribed_bonus_used);
  const cleanUsername = CHANNEL_USERNAME?.replace('@', '');
  const bonusText = bonusAvailable
    ? `\n\nüéÅ –î–æ—Å—Ç—É–ø–µ–Ω –±–æ–Ω—É—Å! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href="https://t.me/${cleanUsername}">@${cleanUsername}</a> –∏ –ø–æ–ª—É—á–∏ <b>7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus</b>.`
    : '';
  const extra = {
    parse_mode: 'HTML',
    disable_web_page_preview: true
  };
  if (bonusAvailable) {
    extra.reply_markup = {
      inline_keyboard: [[ { text: '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –∑–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å', callback_data: 'check_subscription' } ]]
    };
  }
  await ctx.editMessageText(`${T('limitReached')}${bonusText}`, extra);
  playlistSessions.delete(userId);
  return;
}
    
    await ctx.editMessageText(`‚úÖ –û—Ç–ª–∏—á–Ω–æ! –î–æ–±–∞–≤–ª—è—é —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å...`);
    
    // --- 3. –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å–∫–æ–ª—å–∫–æ —Ç—Ä–µ–∫–æ–≤ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å, –° –£–ß–ï–¢–û–ú –õ–ò–ú–ò–¢–ê ---
    const tracksToTake = isAll ? session.tracks.length : 10;
    
    // –ë–µ—Ä–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏–∑: (–∂–µ–ª–∞–µ–º–æ–µ –∫–æ–ª-–≤–æ —Ç—Ä–µ–∫–æ–≤) –∏ (–æ—Å—Ç–∞–≤—à–∏–π—Å—è –ª–∏–º–∏—Ç)
    const numberOfTracksToQueue = Math.min(tracksToTake, remainingLimit);
    
    const tracksToProcess = session.tracks.slice(0, numberOfTracksToQueue);
    
    // --- 4. –ü—Ä–æ—Å—Ç–æ —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á–∏ –≤ –æ—á–µ—Ä–µ–¥—å (–±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—ç—à–∞) ---
    for (const track of tracksToProcess) {
        addTaskToQueue({
            userId,
            source: 'soundcloud',
            url: track.webpage_url || track.url,
            originalUrl: track.webpage_url || track.url,
            metadata: {
                id: track.id,
                title: track.title,
                uploader: track.uploader,
                duration: track.duration,
                thumbnail: track.thumbnail
            },
        });
    }
    
    // --- 5. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
    let reportMessage = `‚è≥ ${tracksToProcess.length} —Ç—Ä–µ–∫(–æ–≤) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å.`;
    
    if (numberOfTracksToQueue < tracksToTake) {
        reportMessage += `\n\n‚ÑπÔ∏è –í–∞—à –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –±—É–¥–µ—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–∫–∏ –∏–∑ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.`;
    }
    
    await ctx.reply(reportMessage);
    playlistSessions.delete(userId);
});

// bot.js (–¢–í–û–ô –ö–û–î, –ö–û–¢–û–†–´–ô –£–ñ–ï –ü–†–ê–í–ò–õ–¨–ù–´–ô)

bot.action(/pl_select_manual:(.+)/, async (ctx) => {
    const userId = ctx.from.id;
    const playlistId = ctx.match[1];
    const session = playlistSessions.get(userId);
    
    if (!session || session.playlistId !== playlistId) {
        return await ctx.answerCbQuery('‚ùóÔ∏è –°–µ—Å—Å–∏—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–∞.', { show_alert: true });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å —É–∂–µ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    if (!session.fullTracks) {
        // ==========================================================
        //         –≠–¢–û –ò–î–ï–ê–õ–¨–ù–û–ï –†–ï–®–ï–ù–ò–ï –î–õ–Ø UX
        // ==========================================================
        
        // 1. –ú–≥–Ω–æ–≤–µ–Ω–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ
        await ctx.answerCbQuery('‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–µ–∫–æ–≤...');
        
        // 2. –ú–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –±—ã–ª–æ –ø–æ–Ω—è—Ç–Ω–æ, —á—Ç–æ –∏–¥–µ—Ç —Ä–∞–±–æ—Ç–∞
        await ctx.editMessageText('‚è≥ –ü–æ–ª—É—á–∞—é –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.');
        
        try {
            // 3. –ó–∞–ø—É—Å–∫–∞–µ–º –¥–æ–ª–≥—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
            const youtubeDl = getYoutubeDl();
            const fullData = await youtubeDl(session.originalUrl, { dumpSingleJson: true });
            
            session.tracks = fullData.entries.filter(track => track && track.url);
            session.fullTracks = true; // –°—Ç–∞–≤–∏–º —Ñ–ª–∞–≥, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
            
        } catch (e) {
            console.error('[Playlist] –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞–∑–≤–∞–Ω–∏–π:', e);
            await ctx.editMessageText('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π –≤–∞—Ä–∏–∞–Ω—Ç.');
            return await ctx.answerCbQuery('–û—à–∏–±–∫–∞!', { show_alert: true });
        }
    }
    
    // 4. –ö–æ–≥–¥–∞ –≤—Å–µ –≥–æ—Ç–æ–≤–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    session.currentPage = 0;
    session.selected = new Set();
    const menu = generateSelectionMenu(userId);
    if (menu) {
        try {
            await ctx.editMessageText(menu.text, menu.options);
        } catch (e) { /* –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º */ }
    }
});
bot.action(/pl_page:(.+):(\d+)/, async (ctx) => {
    const [playlistId, pageStr] = ctx.match.slice(1);
    const userId = ctx.from.id;
    const session = playlistSessions.get(userId);
    if (!session || session.playlistId !== playlistId) return await ctx.answerCbQuery('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.');
    session.currentPage = parseInt(pageStr, 10);
    const menu = generateSelectionMenu(userId);
    if (menu) try { await ctx.editMessageText(menu.text, menu.options); } catch (e) {}
    await ctx.answerCbQuery();
});

bot.action(/pl_toggle:(.+):(\d+)/, async (ctx) => {
    const [playlistId, indexStr] = ctx.match.slice(1);
    const userId = ctx.from.id;
    const session = playlistSessions.get(userId);
    if (!session || session.playlistId !== playlistId) return await ctx.answerCbQuery('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞.');
    const trackIndex = parseInt(indexStr, 10);
    if (session.selected.has(trackIndex)) session.selected.delete(trackIndex);
    else session.selected.add(trackIndex);
    const menu = generateSelectionMenu(userId);
    if (menu) try { await ctx.editMessageText(menu.text, menu.options); } catch (e) {}
    await ctx.answerCbQuery();
});

// bot.js

// bot.js (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–ê –ö–ù–û–ü–ö–ò "–ì–û–¢–û–í–û")

bot.action(/pl_finish:(.+)/, async (ctx) => {
    const playlistId = ctx.match[1];
    const userId = ctx.from.id;
    const session = playlistSessions.get(userId);
    
    // --- –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ ---
    if (!session) {
        return await ctx.answerCbQuery('‚ùóÔ∏è –°–µ—Å—Å–∏—è –≤—ã–±–æ—Ä–∞ –∏—Å—Ç–µ–∫–ª–∞.', { show_alert: true });
    }
    if (session.selected.size === 0) {
        return await ctx.answerCbQuery('–í—ã –Ω–µ –≤—ã–±—Ä–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞.', { show_alert: true });
    }
    // –¢–∞–∫ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –≤–∞–∂–Ω—ã, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ –æ–Ω–∏ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
    if (!session.fullTracks) {
        return await ctx.answerCbQuery('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ –±—ã–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.', { show_alert: true });
    }
    
    // --- 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    const user = await getUser(userId);
    const remainingLimit = user.premium_limit - (user.downloads_today || 0);
    
    if (remainingLimit <= 0) {
  const bonusAvailable = Boolean(CHANNEL_USERNAME && !user.subscribed_bonus_used);
  const cleanUsername = CHANNEL_USERNAME?.replace('@', '');
  const bonusText = bonusAvailable
    ? `\n\nüéÅ –î–æ—Å—Ç—É–ø–µ–Ω –±–æ–Ω—É—Å! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href="https://t.me/${cleanUsername}">@${cleanUsername}</a> –∏ –ø–æ–ª—É—á–∏ <b>7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus</b>.`
    : '';
  const extra = {
    parse_mode: 'HTML',
    disable_web_page_preview: true
  };
  if (bonusAvailable) {
    extra.reply_markup = {
      inline_keyboard: [[ { text: '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –∑–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å', callback_data: 'check_subscription' } ]]
    };
  }
  await ctx.editMessageText(`${T('limitReached')}${bonusText}`, extra);
  playlistSessions.delete(userId);
  return;
}
    
    await ctx.editMessageText(`‚úÖ –ì–æ—Ç–æ–≤–æ! –î–æ–±–∞–≤–ª—è—é ${session.selected.size} –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å...`);
    
    // --- 2. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—á–µ—Ä–µ–¥–∏ –° –£–ß–ï–¢–û–ú –õ–ò–ú–ò–¢–ê ---
    const selectedIndexes = Array.from(session.selected);
    const numberOfTracksToQueue = Math.min(selectedIndexes.length, remainingLimit);
    
    const tracksToProcess = selectedIndexes.slice(0, numberOfTracksToQueue).map(index => session.tracks[index]);
    
    // --- 3. –ü—Ä–æ—Å—Ç–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥—å (–ë–ï–ó –ü–†–û–í–ï–†–ö–ò –ö–≠–®–ê) ---
    for (const track of tracksToProcess) {
        addTaskToQueue({
            userId,
            source: 'soundcloud',
            url: track.webpage_url || track.url,
            originalUrl: track.webpage_url || track.url,
            metadata: {
                id: track.id,
                title: track.title,
                uploader: track.uploader,
                duration: track.duration,
                thumbnail: track.thumbnail
            },
        });
    }
    
    // --- 4. –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
    let reportMessage = `‚è≥ ${tracksToProcess.length} —Ç—Ä–µ–∫(–æ–≤) –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å.`;
    if (numberOfTracksToQueue < selectedIndexes.length) {
        reportMessage += `\n\n‚ÑπÔ∏è –í–∞—à –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –±—É–¥–µ—Ç –∏—Å—á–µ—Ä–ø–∞–Ω. –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç—Ä–µ–∫–∏ –Ω–µ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.`;
    }
    
    await ctx.reply(reportMessage);
    playlistSessions.delete(userId);
});
bot.action(/pl_cancel:(.+)/, async (ctx) => {
    const userId = ctx.from.id;
    const session = playlistSessions.get(userId);
    
    // –ï—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ —Å–µ—Å—Å–∏–∏ —É–∂–µ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if (!session) {
        await ctx.deleteMessage().catch(() => {});
        return await ctx.answerCbQuery();
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∏ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
    const message = `üé∂ –í –ø–ª–µ–π–ª–∏—Å—Ç–µ <b>"${session.title}"</b> –Ω–∞–π–¥–µ–Ω–æ <b>${session.tracks.length}</b> —Ç—Ä–µ–∫–æ–≤.\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º?`;
    const initialMenu = generateInitialPlaylistMenu(session.playlistId, session.tracks.length);
    
    // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è –µ–≥–æ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –≤–∏–¥—É
    try {
        await ctx.editMessageText(message, {
            parse_mode: 'HTML',
            ...initialMenu
        });
        await ctx.answerCbQuery('–í–æ–∑–≤—Ä–∞—â–∞—é...');
    } catch (e) {
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        await ctx.answerCbQuery();
    }
});

// ===================================================================
// –í–°–¢–ê–í–¨ –≠–¢–û–¢ –ö–û–î –í–ú–ï–°–¢–û –°–¢–ê–†–û–ô –§–£–ù–ö–¶–ò–ò handleSoundCloudUrl
// ===================================================================

// –≠–¢–û –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø-"–ü–û–ú–û–©–ù–ò–ö", –ö–û–¢–û–†–ê–Ø –ë–£–î–ï–¢ –†–ê–ë–û–¢–ê–¢–¨ –í –§–û–ù–ï
async function processUrlInBackground(ctx, url) {
    let loadingMessage;
    try {
        loadingMessage = await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É...');
        const youtubeDl = getYoutubeDl();
        
        // === ‚úÖ –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–î–ï–°–¨ ===
        let data;
        try {
            data = await youtubeDl(url, { dumpSingleJson: true, flatPlaylist: true });
        } catch (ytdlError) {
            console.error(`[youtube-dl] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ (processUrlInBackground) –¥–ª—è ${url}:`, ytdlError.stderr || ytdlError.message);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ. –°—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∏–ª–∏ —Ç—Ä–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
        }

        if (!data) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ. –°—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –∏–ª–∏ —Ç—Ä–µ–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.');
        }
        // === –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ===

        if (data.entries && data.entries.length > 0) {
            await ctx.deleteMessage(loadingMessage.message_id).catch(() => {});
            
            const playlistId = `pl_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`;
            playlistSessions.set(ctx.from.id, {
                playlistId,
                title: data.title,
                tracks: data.entries,
                originalUrl: url,
                selected: new Set(),
                currentPage: 0,
                fullTracks: false
            });
            const message = `üé∂ –í –ø–ª–µ–π–ª–∏—Å—Ç–µ <b>"${escapeHtml(data.title)}"</b> –Ω–∞–π–¥–µ–Ω–æ <b>${data.entries.length}</b> —Ç—Ä–µ–∫–æ–≤.\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º?`;
            await ctx.reply(message, { parse_mode: 'HTML', ...generateInitialPlaylistMenu(playlistId, data.entries.length) });
            
        } else {
            const user = await getUser(ctx.from.id);
            if ((user.downloads_today || 0) >= (user.premium_limit || 0)) {
                const bonusAvailable = Boolean(CHANNEL_USERNAME && !user.subscribed_bonus_used);
                const cleanUsername = CHANNEL_USERNAME?.replace('@', '');
                const bonusText = bonusAvailable ? `\n\nüéÅ –î–æ—Å—Ç—É–ø–µ–Ω –±–æ–Ω—É—Å! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href="https://t.me/${cleanUsername}">@${cleanUsername}</a> –∏ –ø–æ–ª—É—á–∏ <b>7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus</b>.` : '';
                const extra = { parse_mode: 'HTML', disable_web_page_preview: true };
                if (bonusAvailable) {
                    extra.reply_markup = { inline_keyboard: [[ { text: '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –∑–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å', callback_data: 'check_subscription' } ]] };
                }
                await ctx.telegram.editMessageText(ctx.chat.id, loadingMessage.message_id, undefined, `${T('limitReached')}${bonusText}`, extra);
                return;
            }
            
            await ctx.telegram.editMessageText(ctx.chat.id, loadingMessage.message_id, undefined, '‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–ª —Ç—Ä–µ–∫, —Å—Ç–∞–≤–ª—é –≤ –æ—á–µ—Ä–µ–¥—å...');
            
            setTimeout(() => ctx.deleteMessage(loadingMessage.message_id).catch(() => {}), 3000);
            
            addTaskToQueue({
                userId: ctx.from.id,
                source: 'soundcloud',
                url: data.webpage_url || url,
                originalUrl: data.webpage_url || url,
                metadata: { id: data.id, title: data.title, uploader: data.uploader, duration: data.duration, thumbnail: data.thumbnail },
                ctx: null
            });
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–µ URL:', error.message);
        const userMessage = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ—Å—Ç—É–ø–µ–Ω.';
        if (loadingMessage) {
            await ctx.telegram.editMessageText(ctx.chat.id, loadingMessage.message_id, undefined, userMessage).catch(() => {});
        } else {
            await ctx.reply(userMessage);
        }
    }
}

async function handleSoundCloudUrl(ctx, url) {
    let loadingMessage;
    try {
        loadingMessage = await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É...');
        const youtubeDl = getYoutubeDl();
        
        let data;
        try {
            data = await youtubeDl(url, {
                dumpSingleJson: true,
                flatPlaylist: true
            });
        } catch (ytdlError) {
            console.error(`[youtube-dl] –û—à–∏–±–∫–∞:`, ytdlError.stderr || ytdlError.message);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.');
        }
        
        if (!data) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ.');
        }
        
        // === –ü–†–û–í–ï–†–ö–ê: –ü–õ–ï–ô–õ–ò–°–¢ –ò–õ–ò –û–î–ò–ù–û–ß–ù–´–ô –¢–†–ï–ö ===
        if (data.entries && data.entries.length > 1) {
            // –≠–¢–û –ü–õ–ï–ô–õ–ò–°–¢
            await ctx.deleteMessage(loadingMessage.message_id).catch(() => {});
            
            const playlistId = `pl_${Date.now()}_${Math.random().toString(36).substr(2, 5)}`;
            playlistSessions.set(ctx.from.id, {
                playlistId,
                title: data.title,
                tracks: data.entries,
                originalUrl: url,
                selected: new Set(),
                currentPage: 0,
                fullTracks: false
            });
            
            const message = `üé∂ –í –ø–ª–µ–π–ª–∏—Å—Ç–µ <b>"${escapeHtml(data.title)}"</b> –Ω–∞–π–¥–µ–Ω–æ <b>${data.entries.length}</b> —Ç—Ä–µ–∫–æ–≤.\n\n–ß—Ç–æ –¥–µ–ª–∞–µ–º?`;
            await ctx.reply(message, {
                parse_mode: 'HTML',
                ...generateInitialPlaylistMenu(playlistId, data.entries.length)
            });
            
        } else {
            // –≠–¢–û –û–î–ò–ù–û–ß–ù–´–ô –¢–†–ï–ö
            // ‚úÖ –£–î–ê–õ–Ø–ï–ú –°–û–û–ë–©–ï–ù–ò–ï –ò –ü–ï–†–ï–î–ê–Å–ú –£–ü–†–ê–í–õ–ï–ù–ò–ï enqueue
            await ctx.deleteMessage(loadingMessage.message_id).catch(() => {});
            
            // enqueue –°–ê–ú –ø—Ä–æ–≤–µ—Ä–∏—Ç –∫—ç—à, –ø–æ–∫–∞–∂–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç —Ç—Ä–µ–∫
            enqueue(ctx, ctx.from.id, url);
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ URL:', error.message);
        const userMessage = '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—Å—ã–ª–∫—É.';
        if (loadingMessage) {
            await ctx.telegram.editMessageText(
                ctx.chat.id,
                loadingMessage.message_id,
                undefined,
                userMessage
            ).catch(() => {});
        } else {
            await ctx.reply(userMessage);
        }
    }
}
bot.on('text', async (ctx) => {
                // =====> –ü–†–ê–í–ò–õ–¨–ù–´–ô –í–ê–†–ò–ê–ù–¢ <=====
                if (isShuttingDown()) { // –ü–†–ê–í–ò–õ–¨–ù–û: —Å–∫–æ–±–æ–∫ –Ω–µ—Ç
                    console.log('[Shutdown] –û—Ç–∫–ª–æ–Ω–µ–Ω –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å, —Ç–∞–∫ –∫–∞–∫ –∏–¥–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.');
                    return;
                }
                
                // =====> –ü–†–ê–í–ò–õ–¨–ù–´–ô –í–ê–†–ò–ê–ù–¢ <=====
                if (isMaintenanceMode() && ctx.from.id !== ADMIN_ID) { // –ü–†–ê–í–ò–õ–¨–ù–û: –∏ –∑–¥–µ—Å—å —Ç–æ–∂–µ –Ω–µ—Ç
                    return await ctx.reply('‚è≥ –ë–æ—Ç –Ω–∞ –ø–ª–∞–Ω–æ–≤–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ù–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 5-10 –º–∏–Ω—É—Ç.');
                }
    if (ctx.chat.type !== 'private') {
        console.log(`[Ignore] –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω–µ-–ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ —á–∞—Ç–∞ (${ctx.chat.type}) –±—ã–ª–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ.`);
        return;
    }
    
    const text = ctx.message.text;
    if (text.startsWith('/')) return;
    if (Object.values(allTextsSync()).includes(text)) return;
    
    const urlMatch = text.match(/(https?:\/\/[^\s]+)/g);
    if (!urlMatch) {
        return await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É.');
    }
    
   const url = urlMatch[0];

if (url.includes('soundcloud.com')) {
  // –†–ê–ù–ù–ò–ô –ß–ï–ö –õ–ò–ú–ò–¢–ê: –¥–æ –ª—é–±–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å—Å—ã–ª–∫–∏
  const user = await getUser(ctx.from.id); // resetDailyLimitIfNeeded —É–∂–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª –≤ middleware
  if ((user.downloads_today || 0) >= (user.premium_limit || 0)) {
    const bonusAvailable = Boolean(CHANNEL_USERNAME && !user.subscribed_bonus_used);
    const cleanUsername = CHANNEL_USERNAME?.replace('@', '');
    const bonusText = bonusAvailable
      ? `\n\nüéÅ –î–æ—Å—Ç—É–ø–µ–Ω –±–æ–Ω—É—Å! –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ <a href="https://t.me/${cleanUsername}">@${cleanUsername}</a> –∏ –ø–æ–ª—É—á–∏ <b>7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus</b>.`
      : '';

    const extra = {
      parse_mode: 'HTML',
      disable_web_page_preview: true
    };
    if (bonusAvailable) {
      extra.reply_markup = {
        inline_keyboard: [[ { text: '‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –∑–∞–±—Ä–∞—Ç—å –±–æ–Ω—É—Å', callback_data: 'check_subscription' } ]]
      };
    }

    await ctx.reply(`${T('limitReached')}${bonusText}`, extra);
    return; // –í–ê–ñ–ù–û: –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å—Å—ã–ª–∫–∏
  }

  // –õ–∏–º–∏—Ç –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é –ª–æ–≥–∏–∫—É
  handleSoundCloudUrl(ctx, url);
} else if (url.includes('open.spotify.com')) {
  // –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞
  await ctx.reply('üõ† –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏–∑ Spotify –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–∏. –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º!');
} else {
  // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –Ω–µ —É–ø–æ–º–∏–Ω–∞—Ç—å Spotify
  await ctx.reply('–Ø —É–º–µ—é —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç—Ä–µ–∫–∏ –∏–∑ SoundCloud. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!');
}
});