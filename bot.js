// bot.js (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø)

import { Telegraf, Markup } from 'telegraf';
import { updateUserField, getUser, createUser, setPremium, getAllUsers, saveTrackForUser } from './db.js';
import { T, allTextsSync } from './config/texts.js';
import { enqueue, downloadQueue } from './services/downloadManager.js';
import { WEBHOOK_URL } from './config.js'; // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ ADMIN_ID –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è –æ—Ç—Å—é–¥–∞ –∏–ª–∏ –Ω–∞–ø—Ä—è–º—É—é

const ADMIN_ID = Number(process.env.ADMIN_ID);

const bot = new Telegraf(process.env.BOT_TOKEN, {
    handlerTimeout: 90_000 // 90 —Å–µ–∫—É–Ω–¥
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π "—Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–π –∫—Ä—É–≥"
bot.catch(async (err, ctx) => {
    console.error(`üî¥ [Telegraf Catch] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è update ${ctx.update.update_id}:`, err);
    if (err instanceof Telegraf.TelegramError && err.response?.error_code === 403) {
        const userId = ctx.from?.id;
        if (userId) {
            console.warn(`[Telegraf Catch] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –û—Ç–∫–ª—é—á–∞–µ–º.`);
            await updateUserField(userId, 'active', false).catch(dbError => {
                console.error(`[Telegraf Catch] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, dbError);
            });
        }
    }
});

// –ú–∏–¥–ª–≤—ç—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
bot.use(async (ctx, next) => {
    const userId = ctx.from?.id;
    if (!userId) return next();
    try {
        ctx.state.user = await getUser(userId, ctx.from.first_name, ctx.from.username);
    } catch (error) { console.error(`–û—à–∏–±–∫–∞ –≤ –º–∏–¥–ª–≤–∞—Ä–µ –¥–ª—è ${userId}:`, error); }
    return next();
});

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

bot.start(async (ctx) => {
    console.log(`[Bot] /start –æ—Ç ${ctx.from.id}`);
    try {
        await createUser(ctx.from.id, ctx.from.first_name, ctx.from.username, ctx.startPayload || null);
        await ctx.reply(T('start'), Markup.keyboard([[T('menu'), T('upgrade')], [T('mytracks'), T('help')]]).resize());
    } catch (e) { console.error(e); }
});

bot.command('admin', async (ctx) => {
    if (ctx.from.id !== ADMIN_ID) return;
    console.log(`[Bot] /admin –æ—Ç –∞–¥–º–∏–Ω–∞`);
    try {
        const users = await getAllUsers(true);
        const totalUsers = users.length;
        const activeUsers = users.filter(u => u.active).length;
        const totalDownloads = users.reduce((sum, u) => sum + (u.total_downloads || 0), 0);
        
        const statsMessage = `
üìä *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞*
üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: *${totalUsers}*
‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: *${activeUsers}*
üì• –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∑–æ–∫: *${totalDownloads}*
‚öôÔ∏è –û—á–µ—Ä–µ–¥—å: *${downloadQueue.activeTasks}* –≤ —Ä–∞–±–æ—Ç–µ, *${downloadQueue.size}* –≤ –æ–∂–∏–¥–∞–Ω–∏–∏.
[–û—Ç–∫—Ä—ã—Ç—å –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å](${WEBHOOK_URL.replace(/\/$/, '')}/dashboard)
        `.trim();
        
        await ctx.replyWithMarkdown(statsMessage);
    } catch (e) {
        console.error('–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /admin:', e);
        await ctx.reply('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.').catch(() => {});
    }
});

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫ (hears) ---

bot.hears(T('menu'), async (ctx) => {
    console.log(`[Bot] "–ú–µ–Ω—é" –æ—Ç ${ctx.from.id}`);
    try {
        const user = await getUser(ctx.from.id);
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω—é
        await ctx.reply(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é...`, Markup.keyboard([[T('menu'), T('upgrade')], [T('mytracks'), T('help')]]).resize());
    } catch (e) { console.error(e); }
});

bot.hears(T('mytracks'), async (ctx) => {
    console.log(`[Bot] "–ú–æ–∏ —Ç—Ä–µ–∫–∏" –æ—Ç ${ctx.from.id}`);
    try {
        const user = await getUser(ctx.from.id);
        let tracks = [];
        try { if (user.tracks_today) tracks = JSON.parse(user.tracks_today); } catch {}
        if (!tracks.length) return await ctx.reply(T('noTracks'));
        
        for (let i = 0; i < tracks.length; i += 10) {
            const chunk = tracks.slice(i, i + 10).filter(t => t.fileId);
            if (chunk.length > 0) {
                await ctx.replyWithMediaGroup(chunk.map(t => ({ type: 'audio', media: t.fileId })));
            }
        }
    } catch (e) { console.error(e); }
});

bot.hears(T('help'), async (ctx) => {
    console.log(`[Bot] "–ü–æ–º–æ—â—å" –æ—Ç ${ctx.from.id}`);
    await ctx.reply(T('helpInfo'));
});

bot.hears(T('upgrade'), async (ctx) => {
    console.log(`[Bot] "–†–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç" –æ—Ç ${ctx.from.id}`);
    await ctx.reply(T('upgradeInfo'));
});

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ (actions) ---

bot.action('check_subscription', async (ctx) => {
    console.log(`[Bot] action 'check_subscription' –æ—Ç ${ctx.from.id}`);
    try {
        // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        // –ù–∞–ø—Ä–∏–º–µ—Ä, isSubscribed(ctx.from.id)
        const subscribed = true; // –ó–∞–≥–ª—É—à–∫–∞
        if (subscribed) {
            await setPremium(ctx.from.id, 50, 7);
            await updateUserField(ctx.from.id, 'subscribed_bonus_used', true);
            await ctx.editMessageText('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: 7 –¥–Ω–µ–π Plus.');
        } else {
            await ctx.answerCbQuery('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑.', { show_alert: true });
        }
    } catch (e) { console.error(e); }
});

// --- –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ ---

bot.on('text', async (ctx) => {
    const userId = ctx.from.id;
    const userText = ctx.message.text;

    if (Object.values(allTextsSync()).includes(userText)) {
        return;
    }

    console.log(`[Bot] –ü–æ–ª—É—á–µ–Ω–æ –ù–ï–∫–æ–º–∞–Ω–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${userId}, –∏—â–µ–º —Å—Å—ã–ª–∫—É...`);
    try {
        const url = userText.match(/(https?:\/\/[^\s]+)/g)?.find(u => u.includes('soundcloud.com'));
        
        if (url) {
            await enqueue(ctx, userId, url);
        } else {
            await ctx.reply('–Ø –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.');
        }
    } catch (e) {
        console.error(`[Bot] –û—à–∏–±–∫–∞ –≤ –æ–±—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è ${userId}:`, e);
    }
});

export { bot };