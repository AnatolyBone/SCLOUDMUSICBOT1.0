// bot.js (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø 5.0 - CRASH FIX)

import { Telegraf, Markup, TelegramError } from 'telegraf';
import { ADMIN_ID, BOT_TOKEN, WEBHOOK_URL, CHANNEL_USERNAME, STORAGE_CHANNEL_ID } from './config.js';
import { updateUserField, getUser, createUser, setPremium, getAllUsers, resetDailyLimitIfNeeded } from './db.js';
import { T, allTextsSync } from './config/texts.js';
import { enqueue, downloadQueue } from './services/downloadManager.js';

async function isSubscribed(userId) {
    if (!CHANNEL_USERNAME) {
        console.warn('CHANNEL_USERNAME –Ω–µ —É–∫–∞–∑–∞–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ.');
        return false;
    }
    try {
        const member = await bot.telegram.getChatMember(CHANNEL_USERNAME, userId);
        return ['creator', 'administrator', 'member'].includes(member.status);
    } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è ${userId} –Ω–∞ ${CHANNEL_USERNAME}:`, e.message);
        return false;
    }
}

function getTariffName(limit) {
    if (limit >= 10000) return 'Unlimited ‚Äî üíé';
    if (limit >= 100) return 'Pro ‚Äî 100 üí™';
    if (limit >= 30) return 'Plus ‚Äî 30 üéØ';
    return 'üÜì Free ‚Äî 5 üü¢';
}

function getDaysLeft(premiumUntil) {
    if (!premiumUntil) return 0;
    const diff = new Date(premiumUntil) - new Date();
    return Math.max(Math.ceil(diff / 86400000), 0);
}

function formatMenuMessage(user, ctx) {
    const tariffLabel = getTariffName(user.premium_limit);
    const downloadsToday = user.downloads_today || 0;
    const daysLeft = getDaysLeft(user.premium_until);

    let message = `
üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!
–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:
üíº –¢–∞—Ä–∏—Ñ: *${tariffLabel}*
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: *${daysLeft}*
üéß –°–µ–≥–æ–¥–Ω—è —Å–∫–∞—á–∞–Ω–æ: *${downloadsToday}* –∏–∑ *${user.premium_limit}*
    `.trim();

    if (!user.subscribed_bonus_used) {
        const cleanUsername = CHANNEL_USERNAME.replace('@', '');
        const channelLink = `[–Ω–∞—à –∫–∞–Ω–∞–ª](https://t.me/${cleanUsername})`;
        message += `\n\nüéÅ *–ë–æ–Ω—É—Å!* –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ ${channelLink} –∏ –ø–æ–ª—É—á–∏ *7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus* –±–µ—Å–ø–ª–∞—Ç–Ω–æ!`;
    }

    message += '\n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è —Å–∫–∞—á–∞—é —Ç—Ä–µ–∫!';
    return message;
}

async function handleSendMessageError(e, userId, ctx = null) {
    console.error(`üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}:`, e.message);
    if (e instanceof TelegramError && e.response?.error_code === 403) {
        await updateUserField(userId, 'active', false);
        console.log(`- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`);
    } else if (ctx) {
        try { await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.'); } catch (sendError) { console.error(`- –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}.`); }
    }
}

export const bot = new Telegraf(BOT_TOKEN, { handlerTimeout: 300_000 });

bot.catch(async (err, ctx) => {
    console.error(`üî¥ [Telegraf Catch] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è update ${ctx.update.update_id}:`, err);
    if (err instanceof TelegramError && err.response?.error_code === 403) {
        if (ctx.from?.id) await updateUserField(ctx.from.id, 'active', false);
    }
});

bot.use(async (ctx, next) => {
    if (ctx.from) {
        await resetDailyLimitIfNeeded(ctx.from.id);
        ctx.state.user = await getUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
    }
    return next();
});

bot.start(async (ctx) => {
    await createUser(ctx.from.id, ctx.from.first_name, ctx.from.username, ctx.startPayload || null);
    await ctx.reply(T('start'), Markup.keyboard([[T('menu'), T('upgrade')], [T('mytracks'), T('help')]]).resize());
});

bot.command('admin', async (ctx) => {
    if (ctx.from.id !== ADMIN_ID) {
        return;
    }
    try {
        // --- –ù–ê–ß–ê–õ–û –ù–û–í–û–ì–û –ö–û–î–ê –ü–†–û–í–ï–†–ö–ò ---
        let storageStatusText = '';
        if (STORAGE_CHANNEL_ID) {
            try {
                await bot.telegram.getChat(STORAGE_CHANNEL_ID);
                storageStatusText = '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω';
            } catch (e) {
                storageStatusText = '‚ùå –û—à–∏–±–∫–∞';
            }
        } else {
            storageStatusText = '‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
        }
        // --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –ö–û–î–ê –ü–†–û–í–ï–†–ö–ò ---
        
        const users = await getAllUsers(true);
        const totalUsers = users.length;
        const activeUsers = users.filter(u => u.active).length;
        const totalDownloads = users.reduce((sum, u) => sum + (u.total_downloads || 0), 0);
        const now = new Date();
        const activeToday = users.filter(u => u.last_active && new Date(u.last_active).toDateString() === now.toDateString()).length;
        
        const statsMessage = `
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
   - –í—Å–µ–≥–æ: *${totalUsers}*
   - –ê–∫—Ç–∏–≤–Ω—ã—Ö (–≤ —Ü–µ–ª–æ–º): *${activeUsers}*
   - –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: *${activeToday}*

üì• **–ó–∞–≥—Ä—É–∑–∫–∏:**
   - –í—Å–µ–≥–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: *${totalDownloads}*

‚öôÔ∏è **–°–∏—Å—Ç–µ–º–∞:**
   - –û—á–µ—Ä–µ–¥—å: *${downloadQueue.size}* –≤ –æ–∂. / *${downloadQueue.active}* –≤ —Ä–∞–±.
   - –ö–∞–Ω–∞–ª-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ: *${storageStatusText}*

üîó **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:**
[–û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥](${WEBHOOK_URL.replace(/\/$/, '')}/dashboard)
        `.trim();
        
        await ctx.reply(statsMessage, { parse_mode: 'Markdown' });
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /admin:', e);
        try { await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.'); } catch (adminBlockError) { console.log('–ê–¥–º–∏–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.'); }
    }
});

bot.action('check_subscription', async (ctx) => {
    const user = await getUser(ctx.from.id);
    if (user.subscribed_bonus_used) {
        return await ctx.answerCbQuery('–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –±–æ–Ω—É—Å.', { show_alert: true });
    }
    const subscribed = await isSubscribed(ctx.from.id);
    if (subscribed) {
        await setPremium(ctx.from.id, 30, 7); 
        await updateUserField(ctx.from.id, 'subscribed_bonus_used', true);
        await ctx.editMessageText('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!\n\n–ú–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–π –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –≤ –º–µ–Ω—é.');
        await ctx.answerCbQuery('–ë–æ–Ω—É—Å —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!');
    } else {
        const escapedChannelUsername = CHANNEL_USERNAME.replace(/_/g, '\\_');
        await ctx.answerCbQuery(`–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª ${escapedChannelUsername}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞.`, { show_alert: true });
    }
});

bot.hears(T('menu'), async (ctx) => {
    const user = await getUser(ctx.from.id);
    const message = formatMenuMessage(user, ctx);
    
    await ctx.reply(T('menu'), Markup.keyboard([[T('menu'), T('upgrade')], [T('mytracks'), T('help')]]).resize());

    const extraOptions = { parse_mode: 'Markdown' };
    if (!user.subscribed_bonus_used) {
        extraOptions.reply_markup = {
            inline_keyboard: [[ Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –∏ —Ö–æ—á—É –±–æ–Ω—É—Å!', 'check_subscription') ]]
        };
    }
    await ctx.reply(message, extraOptions);
});

bot.hears(T('mytracks'), async (ctx) => {
    try {
        const user = await getUser(ctx.from.id);
        const tracks = user.tracks_today;
        if (!tracks || !Array.isArray(tracks) || tracks.length === 0) {
            return await ctx.reply(T('noTracks'));
        }
        for (let i = 0; i < tracks.length; i += 10) {
            const chunk = tracks.slice(i, i + 10).filter(t => t && t.fileId);
            if (chunk.length > 0) {
                await ctx.replyWithMediaGroup(chunk.map(t => ({ type: 'audio', media: t.fileId })));
            }
        }
    } catch (e) {
        await handleSendMessageError(e, ctx.from.id, ctx);
    }
});

bot.hears(T('help'), async (ctx) => await ctx.reply(T('helpInfo')));

bot.hears(T('upgrade'), async (ctx) => {
    await ctx.reply(T('upgradeInfo'), { parse_mode: 'Markdown' });
});

// >>>>>>>> –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–õ–û–ö <<<<<<<<<<
bot.on('text', async (ctx) => {
    const userText = ctx.message.text;
    if (Object.values(allTextsSync()).includes(userText)) {
        return;
    }

    const url = userText.match(/(https?:\/\/[^\s]+)/g)?.find(u => u.includes('soundcloud.com'));
    
    if (url) {
        try {
            // 1. "–ë–µ–∑–æ–ø–∞—Å–Ω–æ" –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ï—Å–ª–∏ –æ–Ω –Ω–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª,
            // .catch() –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç –æ—à–∏–±–∫—É –∏ –Ω–µ –¥–∞—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é —É–ø–∞—Å—Ç—å.
            await ctx.reply('üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å—Å—ã–ª–∫—É...');
        } catch (e) {
            console.warn(`[Pre-send] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å '–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${ctx.from.id}. –í–µ—Ä–æ—è—Ç–Ω–æ, –±–æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
            // –ï—Å–ª–∏ –º—ã –Ω–µ –º–æ–∂–µ–º –¥–∞–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–µ—Ç —Å–º—ã—Å–ª–∞ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.
            return;
        }
        
        // 2. –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—è–∂–µ–ª—É—é –∑–∞–¥–∞—á—É –≤ —Ñ–æ–Ω–µ.
        enqueue(ctx, ctx.from.id, url).catch(err => {
            console.error(`[Background Enqueue Error] –û—à–∏–±–∫–∞ –¥–ª—è user ${ctx.from.id}:`, err.message);
            ctx.reply('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à—É —Å—Å—ã–ª–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é.').catch(() => {});
        });

    } else {
        await ctx.reply('–Ø –Ω–µ –ø–æ–Ω—è–ª. –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.');
    }
});