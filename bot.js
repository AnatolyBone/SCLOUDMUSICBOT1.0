// bot.js
import { Telegraf, Markup, TelegramError } from 'telegraf';
import { ADMIN_ID, BOT_TOKEN, WEBHOOK_URL } from './config.js';
import { updateUserField, getUser, createUser, setPremium, getAllUsers } from './db.js';
import { T, allTextsSync } from './config/texts.js';
import { enqueue, downloadQueue } from './services/downloadManager.js';

function getTariffName(limit) {
    if (limit >= 1000) return 'Unlim (‚àû/–¥–µ–Ω—å)';
    if (limit >= 50) return 'Pro (50/–¥–µ–Ω—å)';
    if (limit >= 20) return 'Plus (30/–¥–µ–Ω—å)';
    return 'Free (5/–¥–µ–Ω—å)';
}

function getDaysLeft(premiumUntil) {
    if (!premiumUntil) return 0;
    const diff = new Date(premiumUntil) - new Date();
    return Math.max(Math.ceil(diff / 86400000), 0);
}

function formatMenuMessage(user, ctx) {
    const tariffLabel = getTariffName(user.premium_limit);
    const downloadsToday = user.downloads_today || 0;
    const invited = user.referred_count || 0;
    const refLink = `https://t.me/${ctx.botInfo.username}?start=${user.id}`;
    const daysLeft = getDaysLeft(user.premium_until);

    return `
üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!
–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:
üíº –¢–∞—Ä–∏—Ñ: *${tariffLabel}*
‚è≥ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏: *${daysLeft}*
üéß –°–µ–≥–æ–¥–Ω—è —Å–∫–∞—á–∞–Ω–æ: *${downloadsToday}* –∏–∑ *${user.premium_limit}*
üë´ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: *${invited}*
üîó –¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–∑–µ–π:
\`${refLink}\`
–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è —Å–∫–∞—á–∞—é —Ç—Ä–µ–∫!
`.trim();
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
async function handleSendMessageError(e, userId, ctx = null) {
    console.error(`üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}:`, e.message);
    if (e instanceof TelegramError && e.response?.error_code === 403) {
        await updateUserField(userId, 'active', false);
        console.log(`- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –ü–æ–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π.`);
    } else if (ctx) {
        try {
            await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } catch (sendError) {
            console.error(`- –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}.`);
        }
    }
}


export const bot = new Telegraf(BOT_TOKEN, { handlerTimeout: 300_000 });

bot.catch(async (err, ctx) => {
    console.error(`üî¥ [Telegraf Catch] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è update ${ctx.update.update_id}:`, err);
    if (err instanceof TelegramError && err.response?.error_code === 403) {
        if (ctx.from?.id) await updateUserField(ctx.from.id, 'active', false);
    }
});

bot.use(async (ctx, next) => {
    if (ctx.from) ctx.state.user = await getUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
    return next();
});

bot.start(async (ctx) => {
    await createUser(ctx.from.id, ctx.from.first_name, ctx.from.username, ctx.startPayload || null);
    await ctx.reply(T('start'), Markup.keyboard([[T('menu'), T('upgrade')], [T('mytracks'), T('help')]]).resize());
});

bot.command('admin', async (ctx) => {
    if (ctx.from.id !== ADMIN_ID) {
        return;
    }
    try {
        const users = await getAllUsers(true);
        const totalUsers = users.length;
        const activeUsers = users.filter(u => u.active).length;
        const totalDownloads = users.reduce((sum, u) => sum + (u.total_downloads || 0), 0);
        const now = new Date();
        const activeToday = users.filter(u => u.last_active && new Date(u.last_active).toDateString() === now.toDateString()).length;
        
        const statsMessage = `
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:**
   - –í—Å–µ–≥–æ: *${totalUsers}*
   - –ê–∫—Ç–∏–≤–Ω—ã—Ö (–≤ —Ü–µ–ª–æ–º): *${activeUsers}*
   - –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: *${activeToday}*

üì• **–ó–∞–≥—Ä—É–∑–∫–∏:**
   - –í—Å–µ–≥–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: *${totalDownloads}*

‚öôÔ∏è **–û—á–µ—Ä–µ–¥—å —Å–µ–π—á–∞—Å:**
   - –í —Ä–∞–±–æ—Ç–µ: *${downloadQueue.active}*
   - –í –æ–∂–∏–¥–∞–Ω–∏–∏: *${downloadQueue.size}*

üîó **–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:**
[–û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥](${WEBHOOK_URL.replace(/\/$/, '')}/dashboard)
        `.trim();
        
        await ctx.reply(statsMessage, { parse_mode: 'Markdown' });
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /admin:', e);
        try { await ctx.reply('‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.'); } catch (adminBlockError) { console.log('–ê–¥–º–∏–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.'); }
    }
});

bot.action('check_subscription', async (ctx) => {
    try {
        if (await isSubscribed(ctx.from.id)) {
            await setPremium(ctx.from.id, 50, 7);
            await updateUserField(ctx.from.id, 'subscribed_bonus_used', true);
            await ctx.reply('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω –±–æ–Ω—É—Å: 7 –¥–Ω–µ–π Plus.');
        } else {
            await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @SCM_BLOG –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –µ—â—ë —Ä–∞–∑.');
        }
    } catch (e) {
        await handleSendMessageError(e, ctx.from.id, ctx);
    }
    try { await ctx.answerCbQuery(); } catch (cbError) { console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callback-–∑–∞–ø—Ä–æ—Å:', cbError.message); }
});

bot.hears(T('menu'), async (ctx) => {
    const user = await getUser(ctx.from.id);
    await ctx.replyWithMarkdown(formatMenuMessage(user, ctx), Markup.keyboard([[T('menu'), T('upgrade')], [T('mytracks'), T('help')]]).resize());
});

// >>>>>>>> –≠–¢–û–¢ –ë–õ–û–ö –ë–´–õ –ó–ê–ú–ï–ù–ï–ù <<<<<<<<<<
bot.hears(T('mytracks'), async (ctx) => {
    try {
        const user = await getUser(ctx.from.id);
        let tracks = [];
        try {
            if (user.tracks_today) tracks = JSON.parse(user.tracks_today);
        } catch (parseError) {
            console.error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è user ${user.id}:`, parseError);
            tracks = []; // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ç—Ä–µ–∫–æ–≤ –Ω–µ—Ç
        }

        if (!tracks || tracks.length === 0) {
            await ctx.reply(T('noTracks'));
            return;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–µ–∫–∏ –ø–∞—á–∫–∞–º–∏ –ø–æ 10 —à—Ç—É–∫
        for (let i = 0; i < tracks.length; i += 10) {
            const chunk = tracks.slice(i, i + 10).filter(t => t.fileId);
            if (chunk.length > 0) {
                await ctx.replyWithMediaGroup(chunk.map(t => ({ type: 'audio', media: t.fileId })));
            }
        }
    } catch (e) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª—é–±—ã—Ö –æ—à–∏–±–æ–∫ –≤ —ç—Ç–æ–º –±–ª–æ–∫–µ
        await handleSendMessageError(e, ctx.from.id, ctx);
    }
});
// >>>>>>>> –ö–û–ù–ï–¶ –ó–ê–ú–ï–ù–ï–ù–ù–û–ì–û –ë–õ–û–ö–ê <<<<<<<<<<

bot.hears(T('help'), async (ctx) => await ctx.reply(T('helpInfo')));
bot.hears(T('upgrade'), async (ctx) => await ctx.reply(T('upgradeInfo')));

bot.on('text', async (ctx) => {
    const userText = ctx.message.text;
    if (Object.values(allTextsSync()).includes(userText)) return;
    const url = userText.match(/(https?:\/\/[^\s]+)/g)?.find(u => u.includes('soundcloud.com'));
    if (url) {
        await enqueue(ctx, ctx.from.id, url);
    } else {
        await ctx.reply('–Ø –Ω–µ –ø–æ–Ω—è–ª. –ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.');
    }
});