// bot.js (–§–ò–ù–ê–õ–¨–ù–ê–Ø –†–ê–ë–û–ß–ê–Ø –í–ï–†–°–ò–Ø –° –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú–ò –ö–û–ú–ê–ù–î–ê–ú–ò)

import { Telegraf, Markup, TelegramError } from 'telegraf';
import { ADMIN_ID, BOT_TOKEN, WEBHOOK_URL, CHANNEL_USERNAME, STORAGE_CHANNEL_ID } from './config.js';
import { updateUserField, getUser, createUser, setPremium, getAllUsers, resetDailyLimitIfNeeded, getCachedTracksCount, logUserAction } from './db.js';
import { T, allTextsSync } from './config/texts.js';
import { performInlineSearch } from './services/searchManager.js';
import { spotifyEnqueue } from './services/spotifyManager.js';
import { enqueue, downloadQueue } from './services/downloadManager.js';

async function isSubscribed(userId) {
    if (!CHANNEL_USERNAME) return false;
    try {
        const member = await bot.telegram.getChatMember(CHANNEL_USERNAME, userId);
        return ['creator', 'administrator', 'member'].includes(member.status);
    } catch (e) {
        console.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è ${userId} –Ω–∞ ${CHANNEL_USERNAME}:`, e.message);
        return false;
    }
}

function getTariffName(limit) {
    if (limit >= 10000) return 'Unlimited ‚Äî üíé';
    if (limit >= 100) return 'Pro ‚Äî 100 üí™';
    if (limit >= 30) return 'Plus ‚Äî 30 üéØ';
    return 'üÜì Free ‚Äî 5 üü¢';
}

function getDaysLeft(premiumUntil) {
    if (!premiumUntil) return 0;
    const diff = new Date(premiumUntil) - new Date();
    return Math.max(Math.ceil(diff / 86400000), 0);
}

function formatMenuMessage(user, ctx) {
    const tariffLabel = getTariffName(user.premium_limit);
    const downloadsToday = user.downloads_today || 0;
    const daysLeft = getDaysLeft(user.premium_until);

    let message = `
üëã –ü—Ä–∏–≤–µ—Ç, ${user.first_name || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!
<b>–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:</b>
üíº <b>–¢–∞—Ä–∏—Ñ:</b> <i>${tariffLabel}</i>
‚è≥ <b>–û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π –ø–æ–¥–ø–∏—Å–∫–∏:</b> <i>${daysLeft}</i>
üéß <b>–°–µ–≥–æ–¥–Ω—è —Å–∫–∞—á–∞–Ω–æ:</b> <i>${downloadsToday}</i> –∏–∑ <i>${user.premium_limit}</i>
    `.trim();

    if (!user.subscribed_bonus_used && CHANNEL_USERNAME) {
        const cleanUsername = CHANNEL_USERNAME.replace('@', '');
        const channelLink = `<a href="https://t.me/${cleanUsername}">–Ω–∞—à –∫–∞–Ω–∞–ª</a>`;
        message += `\n\nüéÅ <b>–ë–æ–Ω—É—Å!</b> –ü–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ ${channelLink} –∏ –ø–æ–ª—É—á–∏ <b>7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus</b> –±–µ—Å–ø–ª–∞—Ç–Ω–æ!`;
    }

    message += '\n\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É, –∏ —è —Å–∫–∞—á–∞—é —Ç—Ä–µ–∫!';
    return message;
}

async function handleSendMessageError(e, userId, ctx = null) {
    console.error(`üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}:`, e.message);
    if (e instanceof TelegramError && e.response?.error_code === 403) {
        await updateUserField(userId, 'active', false);
        console.log(`- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞.`);
    } else if (ctx) {
        try { await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.'); } catch (sendError) {}
    }
}

export const bot = new Telegraf(BOT_TOKEN, { handlerTimeout: 300_000 });

bot.catch(async (err, ctx) => {
    console.error(`üî¥ [Telegraf Catch] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è update ${ctx.update.update_id}:`, err);
    if (err instanceof TelegramError && err.response?.error_code === 403) {
        if (ctx.from?.id) await updateUserField(ctx.from.id, 'active', false);
    }
});

bot.use(async (ctx, next) => {
    if (!ctx.from) return next();
    const user = await getUser(ctx.from.id, ctx.from.first_name, ctx.from.username);
    ctx.state.user = user;
    if (user && user.active === false) {
        console.log(`[Access Denied] –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${ctx.from.id} –ø–æ–ø—ã—Ç–∞–ª—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.`);
        ctx.reply(T('blockedMessage')).catch(() => {});
        return;
    }
    await resetDailyLimitIfNeeded(ctx.from.id);
    return next();
});

bot.start(async (ctx) => {
    await createUser(ctx.from.id, ctx.from.first_name, ctx.from.username, ctx.startPayload || null);
    const user = ctx.state.user;
    const isNewRegistration = (Date.now() - new Date(user.created_at).getTime()) < 5000;

    if (isNewRegistration) {
        await logUserAction(ctx.from.id, 'registration');
    }

    const startMessage = isNewRegistration ? T('start_new_user') : T('start');
    
    await ctx.reply(startMessage, {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        ...Markup.keyboard([
            [T('menu'), T('upgrade')],
            [T('mytracks'), T('help')]
        ]).resize()
    });
});

bot.command('admin', async (ctx) => {
    if (ctx.from.id !== ADMIN_ID) return;
    try {
        let storageStatusText = STORAGE_CHANNEL_ID ? '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω' : '‚ö†Ô∏è –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω';
        const [users, cachedTracksCount] = await Promise.all([ getAllUsers(true), getCachedTracksCount() ]);
        const totalUsers = users.length;
        const activeUsers = users.filter(u => u.active).length;
        const totalDownloads = users.reduce((sum, u) => sum + (u.total_downloads || 0), 0);
        const activeToday = users.filter(u => u.last_active && new Date(u.last_active).toDateString() === new Date().toDateString()).length;

        const statsMessage = `<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ë–æ—Ç–∞</b>\n\n` +
            `<b>üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n   - –í—Å–µ–≥–æ: <i>${totalUsers}</i>\n   - –ê–∫—Ç–∏–≤–Ω—ã—Ö: <i>${activeUsers}</i>\n   - –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è: <i>${activeToday}</i>\n\n` +
            `<b>üì• –ó–∞–≥—Ä—É–∑–∫–∏:</b>\n   - –í—Å–µ–≥–æ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è: <i>${totalDownloads}</i>\n\n` +
            `<b>‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞:</b>\n   - –û—á–µ—Ä–µ–¥—å: <i>${downloadQueue.size}</i> –≤ –æ–∂. / <i>${downloadQueue.active}</i> –≤ —Ä–∞–±.\n` +
            `   - –ö–∞–Ω–∞–ª-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ: <i>${storageStatusText}</i>\n   - –¢—Ä–µ–∫–æ–≤ –≤ –∫—ç—à–µ: <i>${cachedTracksCount}</i>\n\n` +
            `<b>üîó –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:</b>\n<a href="${WEBHOOK_URL.replace(/\/$/, '')}/dashboard">–û—Ç–∫—Ä—ã—Ç—å –¥–∞—à–±–æ—Ä–¥</a>`;

        await ctx.reply(statsMessage, { parse_mode: 'HTML', disable_web_page_preview: true });
    } catch (e) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /admin:', e);
    }
});

// ======================= –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ1: –î–û–ë–ê–í–õ–Ø–ï–ú –ö–û–ú–ê–ù–î–£ /premium =======================
bot.command('premium', async (ctx) => {
    // –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –±—É–¥–µ—Ç –¥–µ–ª–∞—Ç—å —Ç–æ –∂–µ —Å–∞–º–æ–µ, —á—Ç–æ –∏ –∫–Ω–æ–ø–∫–∞ "–†–∞—Å—à–∏—Ä–∏—Ç—å –ª–∏–º–∏—Ç"
    await ctx.reply(T('upgradeInfo'), { parse_mode: 'HTML', disable_web_page_preview: true });
});

bot.action('check_subscription', async (ctx) => {
    const user = await getUser(ctx.from.id);
    if (user.subscribed_bonus_used) {
        return await ctx.answerCbQuery('–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –±–æ–Ω—É—Å.', { show_alert: true });
    }
    const subscribed = await isSubscribed(ctx.from.id);
    if (subscribed) {
        await setPremium(ctx.from.id, 30, 7); 
        await updateUserField(ctx.from.id, 'subscribed_bonus_used', true);
        await logUserAction(ctx.from.id, 'bonus_received');
        await ctx.editMessageText('üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 7 –¥–Ω–µ–π —Ç–∞—Ä–∏—Ñ–∞ Plus. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É!');
    } else {
        await ctx.answerCbQuery(`–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞.`, { show_alert: true });
    }
});

bot.hears(T('menu'), async (ctx) => {
    const user = await getUser(ctx.from.id);
    const message = formatMenuMessage(user, ctx);
    const extraOptions = { 
        parse_mode: 'HTML',
        disable_web_page_preview: true
    };
    if (!user.subscribed_bonus_used && CHANNEL_USERNAME) {
        extraOptions.reply_markup = { inline_keyboard: [[ Markup.button.callback('‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –∏ —Ö–æ—á—É –±–æ–Ω—É—Å!', 'check_subscription') ]] };
    }
    await ctx.reply(message, extraOptions);
});

bot.hears(T('mytracks'), async (ctx) => {
    try {
        const user = await getUser(ctx.from.id);
        const tracks = user.tracks_today;
        if (!tracks || !Array.isArray(tracks) || tracks.length === 0) {
            return await ctx.reply(T('noTracks'));
        }
        for (let i = 0; i < tracks.length; i += 10) {
            const chunk = tracks.slice(i, i + 10).filter(t => t && t.fileId);
            if (chunk.length > 0) {
                await ctx.replyWithMediaGroup(chunk.map(t => ({ type: 'audio', media: t.fileId })));
            }
        }
    } catch (e) {
        await handleSendMessageError(e, ctx.from.id, ctx);
    }
});

bot.hears(T('help'), async (ctx) => await ctx.reply(T('helpInfo'), { parse_mode: 'HTML', disable_web_page_preview: true }));
bot.hears(T('upgrade'), async (ctx) => await ctx.reply(T('upgradeInfo'), { parse_mode: 'HTML', disable_web_page_preview: true }));

bot.on('inline_query', async (ctx) => {
    const query = ctx.inlineQuery.query;
    if (!query || query.trim().length < 2) {
        return await ctx.answerInlineQuery([], {
            switch_pm_text: '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–µ–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞...',
            switch_pm_parameter: 'start',
        });
    }
    try {
        const results = await performInlineSearch(query);
        await ctx.answerInlineQuery(results, { cache_time: 60 });
    } catch (error) {
        console.error('[Inline Query] –ì–ª–æ–±–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞:', error);
        await ctx.answerInlineQuery([]);
    }
});

// –í–ê–ñ–ù–û: –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ü–û–°–õ–ï –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –∏ hears
bot.on('text', async (ctx) => {
    const userText = ctx.message.text;

    // ======================= –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ2: –ü–†–û–ü–£–°–ö–ê–ï–ú –ö–û–ú–ê–ù–î–´ =======================
    // –≠—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–ø–µ—Ä—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞, —Ç.–∫. –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤ –∫–æ–Ω—Ü–µ, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    if (userText.startsWith('/')) {
        return; // –ö–æ–º–∞–Ω–¥—ã —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –≤—ã—à–µ
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π –∏–∑ –º–µ–Ω—é
    if (Object.values(allTextsSync()).includes(userText)) {
        return; // `hears` —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª
    }
    
    const urlMatch = userText.match(/(https?:\/\/[^\s]+)/g);
    if (!urlMatch || urlMatch.length === 0) {
        await ctx.reply('–Ø –Ω–µ –ø–æ–Ω—è–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç—Ä–µ–∫, –∞–ª—å–±–æ–º –∏–ª–∏ –ø–ª–µ–π–ª–∏—Å—Ç.');
        return;
    }
    
    const url = urlMatch[0];
    
    if (url.includes('soundcloud.com')) {
        enqueue(ctx, ctx.from.id, url).catch(err => {
            console.error(`[SC Enqueue Error] –û—à–∏–±–∫–∞ –¥–ª—è user ${ctx.from.id}:`, err.message);
        });
    } else if (url.includes('open.spotify.com')) {
        spotifyEnqueue(ctx, ctx.from.id, url).catch(err => {
            console.error(`[Spotify Enqueue Error] –û—à–∏–±–∫–∞ –¥–ª—è user ${ctx.from.id}:`, err.message);
        });
    } else {
        await ctx.reply('–Ø –ø–æ–∫–∞ —É–º–µ—é —Å–∫–∞—á–∏–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å SoundCloud –∏ Spotify. –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ!');
    }
});