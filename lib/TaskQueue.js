// lib/TaskQueue.js
// –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç
// –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.

export class TaskQueue {
    constructor(options = {}) {
        this.maxConcurrent = options.maxConcurrent || 1;
        this.taskProcessor = options.taskProcessor;

        if (typeof this.taskProcessor !== 'function') {
            throw new Error('Task processor function is required');
        }

        this.queue = [];
        this.active = 0;
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å.
     * @param {object} task - –û–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.
     */
    add(task) {
        this.queue.push(task);
        this.processNext();
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É –∏–∑ –æ—á–µ—Ä–µ–¥–∏, –µ—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã.
     */
    async processNext() { // <<< –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–æ async
        if (this.active >= this.maxConcurrent || this.queue.length === 0) {
            return; // –í—Å–µ –≤–æ—Ä–∫–µ—Ä—ã –∑–∞–Ω—è—Ç—ã –∏–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
        }

        const task = this.queue.shift(); // –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
        this.active++;
        
        console.log(`[TaskQueue] –ó–∞–ø—É—Å–∫–∞—é –∑–∞–¥–∞—á—É. –ê–∫—Ç–∏–≤–Ω–æ: ${this.active}, –í –æ—á–µ—Ä–µ–¥–∏: ${this.queue.length}`);

        try {
            // <<< –ò–ó–ú–ï–ù–ï–ù–û: –í–µ—Å—å –≤—ã–∑–æ–≤ —Ç–µ–ø–µ—Ä—å –≤–Ω—É—Ç—Ä–∏ try...catch >>>
            await this.taskProcessor(task);
        } catch (err) {
            // –≠—Ç–æ—Ç catch - –Ω–∞—à –≥–ª–∞–≤–Ω—ã–π "—Å–ø–∞—Å–∞—Ç–µ–ª—å–Ω—ã–π –∫—Ä—É–≥".
            // –û–Ω –ø–æ–π–º–∞–µ—Ç –ª—é–±—É—é –æ—à–∏–±–∫—É, –∫–æ—Ç–æ—Ä—É—é –º–æ–≥ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å taskProcessor.
            console.error('üî¥ [TaskQueue] –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ task processor:', err);
        } finally {
            // –≠—Ç–æ—Ç –±–ª–æ–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –≤—Å–µ–≥–¥–∞: –∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞, –∏ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏.
            this.active--;
            console.log(`[TaskQueue] –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ê–∫—Ç–∏–≤–Ω–æ: ${this.active}, –í –æ—á–µ—Ä–µ–¥–∏: ${this.queue.length}`);
            this.processNext(); // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∑–∞–¥–∞—á—É
        }
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á –≤ –æ—á–µ—Ä–µ–¥–∏.
     */
    get size() {
        return this.queue.length;
    }

    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö (–≤—ã–ø–æ–ª–Ω—è—é—â–∏—Ö—Å—è) –∑–∞–¥–∞—á.
     */
    get activeTasks() {
        return this.active;
    }
}