// lib/TaskQueue.js (—É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)

/**
 * –ü—Ä–æ—Å—Ç–∞—è –æ—á–µ—Ä–µ–¥—å –∑–∞–¥–∞—á —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞–º–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
 */
export class TaskQueue {
  constructor(options = {}) {
    this.maxConcurrent = Math.max(1, options.maxConcurrent || 1);
    this.taskProcessor = options.taskProcessor;
    this.taskTimeout = options.taskTimeout || 10 * 60 * 1000; // 10 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    
    if (typeof this.taskProcessor !== 'function') {
      throw new Error('TaskQueue: taskProcessor must be a function');
    }
    
    this.queue = [];
    this.active = 0;
    this.paused = options.autostart === false;
    this._idleResolvers = [];
    
    // –ú–µ—Ç—Ä–∏–∫–∏
    this.stats = {
      processed: 0,
      errors: 0,
      timeouts: 0,
      rejected: 0 // –ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ –∑–∞–¥–∞—á–∏
    };
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É –≤ –æ—á–µ—Ä–µ–¥—å —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º
   * @param {Object} task - –û–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏
   * @returns {Promise} –ü—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
   */
  add(task) {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–¥–∞—á–∏
    if (!task || typeof task !== 'object') {
      console.error('[TaskQueue] Invalid task payload (not an object):', typeof task);
      this.stats.rejected++;
      return Promise.reject(new Error('Invalid task payload'));
    }
    
    // –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –¥–ª—è –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –º—É–∑—ã–∫–∏
    if (!task.metadata && !task.url && !task.originalUrl) {
      console.error('[TaskQueue] Dropping task without url/originalUrl/metadata:', task);
      this.stats.rejected++;
      return Promise.reject(new Error('Task missing required fields'));
    }
    
    const promise = new Promise((resolve, reject) => {
      task._resolve = resolve;
      task._reject = reject;
      task._addedAt = Date.now();
    });
    
    const priority = (typeof task?.priority === 'number') ? task.priority : 0;
    const idx = this.queue.findIndex(t => ((t.priority || 0) < priority));
    
    if (idx === -1) {
      this.queue.push(task);
    } else {
      this.queue.splice(idx, 0, task);
    }
    
    this.processNext();
    
    return promise;
  }

  /**
   * –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
   */
  pause() {
    if (!this.paused) {
      console.log('[TaskQueue] –û—á–µ—Ä–µ–¥—å –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      this.paused = true;
    }
  }

  /**
   * –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–¥–∞—á
   */
  start() {
    if (this.paused) {
      console.log('[TaskQueue] –û—á–µ—Ä–µ–¥—å –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∞');
      this.paused = false;
      this.processNext();
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–¥–∞—á
   */
  setMaxConcurrent(n) {
    this.maxConcurrent = Math.max(1, n | 0);
    console.log(`[TaskQueue] maxConcurrent —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ ${this.maxConcurrent}`);
    this.processNext();
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏.
   * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
   */
  clear() {
    const clearedCount = this.queue.length;
    this.queue.forEach(task => task._reject?.(new Error('Queue cleared by admin')));
    this.queue.length = 0;
    console.log(`[TaskQueue] –û—á–µ—Ä–µ–¥—å –æ—á–∏—â–µ–Ω–∞, —É–¥–∞–ª–µ–Ω–æ ${clearedCount} –∑–∞–¥–∞—á.`);
    return clearedCount;
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –∑–∞–¥–∞—á–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   * @param {number|string} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
   * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–¥–∞–ª—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞—á.
   */
  clearUser(userId) {
    const initialSize = this.queue.length;
    const numericUserId = Number(userId);
    
    if (isNaN(numericUserId)) {
      console.error('[TaskQueue] clearUser: Invalid userId');
      return 0;
    }
    
    this.queue.forEach(task => {
      if (Number(task.userId) === numericUserId) {
        task._reject?.(new Error('Tasks for user cleared by admin'));
      }
    });
    
    this.queue = this.queue.filter(task => Number(task.userId) !== numericUserId);
    
    const removedCount = initialSize - this.queue.length;
    if (removedCount > 0) {
      console.log(`[TaskQueue] –£–¥–∞–ª–µ–Ω–æ ${removedCount} –∑–∞–¥–∞—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}.`);
    }
    return removedCount;
  }
  
  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∑–∞–¥–∞—á–∏ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
   */
  async processNext() {
    if (this.paused) return;
    
    while (this.active < this.maxConcurrent && this.queue.length > 0) {
      const task = this.queue.shift();
      this.active++;
      
      const startTime = Date.now();
      const waitTime = startTime - (task._addedAt || startTime);
      
      if (waitTime > 60000) {
        console.warn(`[TaskQueue] –ó–∞–¥–∞—á–∞ –∂–¥–∞–ª–∞ ${(waitTime / 1000).toFixed(1)}—Å –≤ –æ—á–µ—Ä–µ–¥–∏`);
      }
      
      Promise.race([
        this.taskProcessor(task),
        new Promise((_, reject) => 
          setTimeout(() => reject(new Error('TASK_TIMEOUT')), this.taskTimeout)
        )
      ])
        .then((result) => {
          this.stats.processed++;
          task._resolve?.(result);
          
          const duration = Date.now() - startTime;
          if (duration > 30000) {
            console.log(`[TaskQueue] –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∑–∞ ${(duration / 1000).toFixed(1)}—Å`);
          }
        })
        .catch(err => {
          if (err.message === 'TASK_TIMEOUT') {
            this.stats.timeouts++;
            console.error(`üî¥ [TaskQueue] –ó–∞–¥–∞—á–∞ –ø—Ä–µ–≤—ã—Å–∏–ª–∞ —Ç–∞–π–º–∞—É—Ç ${this.taskTimeout / 1000}—Å:`, {
              userId: task.userId, url: task.url || task.originalUrl
            });
          } else {
            this.stats.errors++;
            console.error('üî¥ [TaskQueue] –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏:', {
              userId: task.userId, url: task.url || task.originalUrl, error: err.message
            });
          }
          
          task._reject?.(err);
        })
        .finally(() => {
          this.active--;
          
          if (this.queue.length === 0 && this.active === 0) {
            this._resolveIdle();
          }
          
          this.processNext();
        });
    }
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–º–∏—Å, –∫–æ—Ç–æ—Ä—ã–π —Ä–µ–∑–æ–ª–≤–∏—Ç—Å—è –∫–æ–≥–¥–∞ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞
   */
  onIdle() {
    if (this.queue.length === 0 && this.active === 0) {
      return Promise.resolve();
    }
    return new Promise(resolve => this._idleResolvers.push(resolve));
  }

  /**
   * –†–µ–∑–æ–ª–≤–∏—Ç –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ idle –ø—Ä–æ–º–∏—Å—ã
   */
  _resolveIdle() {
    const resolvers = this._idleResolvers.splice(0, this._idleResolvers.length);
    resolvers.forEach(r => {
      try { r(); } catch {}
    });
  }

  /**
   * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—á–µ—Ä–µ–¥–∏
   */
  getStats() {
    return {
      ...this.stats,
      queueSize: this.queue.length,
      activeTasks: this.active,
      paused: this.paused
    };
  }

  // –ì–µ—Ç—Ç–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  get size() { return this.queue.length; }
  get activeTasks() { return this.active; }
  get pending() { return this.active; }
}